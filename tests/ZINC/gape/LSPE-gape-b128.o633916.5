WARNING:root:The OGB package is out of date. Your version is 1.3.3, while the latest version is 1.3.4.
cuda available with GPU: NVIDIA GeForce GTX 1080 Ti
[I] Loading dataset ZINC...
train, test, val sizes : 10000 1000 1000
[I] Finished loading.
[I] Data load time: 10.6137s
Using 3 automata for GAPE
MODEL DETAILS:

MODEL/Total parameters: GatedGCN 554687
Using 3 automata for GAPE
[!] Adding random automaton graph positional encoding (64).
[!] Using 3 random automata.
Training Graphs:  10000
Validation Graphs:  1000
Test Graphs:  1000
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [0] Train Loss: 1.4743 | Train MAE: 1.4723 | Val Loss: 1.4073 | Val MAE: 1.4052 | Test MAE: 1.5152 | Time: 32.2465
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [1] Train Loss: 1.3837 | Train MAE: 1.3816 | Val Loss: 1.2414 | Val MAE: 1.2398 | Test MAE: 1.3371 | Time: 32.2247
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [2] Train Loss: 1.2491 | Train MAE: 1.2470 | Val Loss: 1.1183 | Val MAE: 1.1164 | Test MAE: 1.1668 | Time: 29.1547
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [3] Train Loss: 1.1218 | Train MAE: 1.1197 | Val Loss: 1.0696 | Val MAE: 1.0676 | Test MAE: 1.1063 | Time: 30.2530
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [4] Train Loss: 1.0076 | Train MAE: 1.0054 | Val Loss: 0.9650 | Val MAE: 0.9630 | Test MAE: 1.0250 | Time: 30.2217
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [5] Train Loss: 0.9633 | Train MAE: 0.9611 | Val Loss: 0.9096 | Val MAE: 0.9075 | Test MAE: 0.9732 | Time: 31.5663
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [6] Train Loss: 0.9118 | Train MAE: 0.9096 | Val Loss: 0.8095 | Val MAE: 0.8074 | Test MAE: 0.8427 | Time: 29.9993
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [7] Train Loss: 0.7951 | Train MAE: 0.7929 | Val Loss: 0.9058 | Val MAE: 0.9038 | Test MAE: 0.9411 | Time: 30.0340
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [8] Train Loss: 0.8218 | Train MAE: 0.8196 | Val Loss: 0.7723 | Val MAE: 0.7702 | Test MAE: 0.8177 | Time: 30.2551
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [9] Train Loss: 0.7992 | Train MAE: 0.7970 | Val Loss: 0.7656 | Val MAE: 0.7635 | Test MAE: 0.8252 | Time: 29.7259
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [10] Train Loss: 0.7775 | Train MAE: 0.7753 | Val Loss: 0.8143 | Val MAE: 0.8122 | Test MAE: 0.8677 | Time: 29.6583
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [11] Train Loss: 0.7628 | Train MAE: 0.7606 | Val Loss: 0.7584 | Val MAE: 0.7563 | Test MAE: 0.7991 | Time: 29.8827
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [12] Train Loss: 0.7402 | Train MAE: 0.7379 | Val Loss: 0.7341 | Val MAE: 0.7319 | Test MAE: 0.7761 | Time: 30.1313
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [13] Train Loss: 0.7499 | Train MAE: 0.7476 | Val Loss: 0.7335 | Val MAE: 0.7314 | Test MAE: 0.7739 | Time: 33.6869
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [14] Train Loss: 0.7507 | Train MAE: 0.7484 | Val Loss: 0.7612 | Val MAE: 0.7590 | Test MAE: 0.7999 | Time: 29.3061
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [15] Train Loss: 0.7577 | Train MAE: 0.7554 | Val Loss: 0.7458 | Val MAE: 0.7437 | Test MAE: 0.7810 | Time: 30.1659
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [16] Train Loss: 0.7554 | Train MAE: 0.7531 | Val Loss: 0.7891 | Val MAE: 0.7870 | Test MAE: 0.8459 | Time: 29.9455
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [17] Train Loss: 0.7526 | Train MAE: 0.7503 | Val Loss: 0.7963 | Val MAE: 0.7942 | Test MAE: 0.8592 | Time: 30.2049
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [18] Train Loss: 0.7419 | Train MAE: 0.7397 | Val Loss: 0.7694 | Val MAE: 0.7673 | Test MAE: 0.8349 | Time: 29.7298
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [19] Train Loss: 0.7261 | Train MAE: 0.7238 | Val Loss: 0.7405 | Val MAE: 0.7384 | Test MAE: 0.7989 | Time: 32.9064
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [20] Train Loss: 0.7398 | Train MAE: 0.7375 | Val Loss: 0.7311 | Val MAE: 0.7289 | Test MAE: 0.7643 | Time: 30.3869
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [21] Train Loss: 0.7302 | Train MAE: 0.7278 | Val Loss: 0.7194 | Val MAE: 0.7172 | Test MAE: 0.7754 | Time: 30.1247
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [22] Train Loss: 0.7384 | Train MAE: 0.7361 | Val Loss: 0.7079 | Val MAE: 0.7057 | Test MAE: 0.7564 | Time: 30.0314
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [23] Train Loss: 0.7283 | Train MAE: 0.7260 | Val Loss: 0.7327 | Val MAE: 0.7304 | Test MAE: 0.7695 | Time: 30.0923
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [24] Train Loss: 0.7306 | Train MAE: 0.7284 | Val Loss: 0.7964 | Val MAE: 0.7942 | Test MAE: 0.8174 | Time: 29.2473
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [25] Train Loss: 0.7177 | Train MAE: 0.7154 | Val Loss: 0.7374 | Val MAE: 0.7351 | Test MAE: 0.8039 | Time: 29.5340
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [26] Train Loss: 0.7117 | Train MAE: 0.7094 | Val Loss: 1.0701 | Val MAE: 1.0679 | Test MAE: 1.0638 | Time: 31.4715
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [27] Train Loss: 0.7162 | Train MAE: 0.7138 | Val Loss: 0.6953 | Val MAE: 0.6931 | Test MAE: 0.7496 | Time: 30.0555
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [28] Train Loss: 0.7019 | Train MAE: 0.6995 | Val Loss: 0.7008 | Val MAE: 0.6986 | Test MAE: 0.7654 | Time: 29.4583
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [29] Train Loss: 0.6849 | Train MAE: 0.6826 | Val Loss: 0.7091 | Val MAE: 0.7068 | Test MAE: 0.7572 | Time: 29.1874
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [30] Train Loss: 0.6667 | Train MAE: 0.6644 | Val Loss: 0.7773 | Val MAE: 0.7751 | Test MAE: 0.8477 | Time: 29.2911
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [31] Train Loss: 0.7016 | Train MAE: 0.6992 | Val Loss: 0.7009 | Val MAE: 0.6987 | Test MAE: 0.7388 | Time: 29.8178
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [32] Train Loss: 0.6677 | Train MAE: 0.6653 | Val Loss: 0.6456 | Val MAE: 0.6434 | Test MAE: 0.7021 | Time: 30.6310
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [33] Train Loss: 0.6643 | Train MAE: 0.6619 | Val Loss: 0.6319 | Val MAE: 0.6297 | Test MAE: 0.7008 | Time: 28.8178
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [34] Train Loss: 0.6519 | Train MAE: 0.6495 | Val Loss: 0.6686 | Val MAE: 0.6664 | Test MAE: 0.7194 | Time: 30.0798
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [35] Train Loss: 0.6337 | Train MAE: 0.6314 | Val Loss: 0.6660 | Val MAE: 0.6638 | Test MAE: 0.7056 | Time: 30.1021
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [36] Train Loss: 0.6116 | Train MAE: 0.6093 | Val Loss: 0.7435 | Val MAE: 0.7412 | Test MAE: 0.8046 | Time: 29.0021
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [37] Train Loss: 0.6420 | Train MAE: 0.6397 | Val Loss: 0.7251 | Val MAE: 0.7229 | Test MAE: 0.7489 | Time: 29.5286
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [38] Train Loss: 0.6328 | Train MAE: 0.6305 | Val Loss: 0.7468 | Val MAE: 0.7445 | Test MAE: 0.8077 | Time: 29.7295
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [39] Train Loss: 0.5908 | Train MAE: 0.5885 | Val Loss: 0.6755 | Val MAE: 0.6733 | Test MAE: 0.7040 | Time: 29.5098
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [40] Train Loss: 0.5985 | Train MAE: 0.5962 | Val Loss: 0.6269 | Val MAE: 0.6246 | Test MAE: 0.6968 | Time: 30.3207
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [41] Train Loss: 0.5780 | Train MAE: 0.5756 | Val Loss: 0.7009 | Val MAE: 0.6987 | Test MAE: 0.7704 | Time: 29.9456
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [42] Train Loss: 0.5893 | Train MAE: 0.5870 | Val Loss: 0.6477 | Val MAE: 0.6455 | Test MAE: 0.6816 | Time: 28.7126
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [43] Train Loss: 0.5974 | Train MAE: 0.5950 | Val Loss: 0.6002 | Val MAE: 0.5980 | Test MAE: 0.6699 | Time: 28.9946
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [44] Train Loss: 0.5580 | Train MAE: 0.5556 | Val Loss: 0.6263 | Val MAE: 0.6241 | Test MAE: 0.6752 | Time: 29.7011
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [45] Train Loss: 0.5463 | Train MAE: 0.5439 | Val Loss: 0.7275 | Val MAE: 0.7252 | Test MAE: 0.7480 | Time: 32.1055
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [46] Train Loss: 0.5620 | Train MAE: 0.5597 | Val Loss: 0.6123 | Val MAE: 0.6101 | Test MAE: 0.6672 | Time: 29.4154
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [47] Train Loss: 0.5529 | Train MAE: 0.5506 | Val Loss: 0.5897 | Val MAE: 0.5875 | Test MAE: 0.6473 | Time: 29.6984
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [48] Train Loss: 0.5420 | Train MAE: 0.5397 | Val Loss: 0.7620 | Val MAE: 0.7597 | Test MAE: 0.7841 | Time: 33.1890
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [49] Train Loss: 0.5496 | Train MAE: 0.5472 | Val Loss: 0.6649 | Val MAE: 0.6626 | Test MAE: 0.6806 | Time: 29.2203
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [50] Train Loss: 0.5485 | Train MAE: 0.5462 | Val Loss: 0.6161 | Val MAE: 0.6139 | Test MAE: 0.6804 | Time: 29.8506
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [51] Train Loss: 0.5226 | Train MAE: 0.5203 | Val Loss: 0.5853 | Val MAE: 0.5831 | Test MAE: 0.6302 | Time: 30.1830
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [52] Train Loss: 0.5034 | Train MAE: 0.5011 | Val Loss: 0.6086 | Val MAE: 0.6064 | Test MAE: 0.6628 | Time: 30.1291
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [53] Train Loss: 0.5365 | Train MAE: 0.5341 | Val Loss: 0.6552 | Val MAE: 0.6529 | Test MAE: 0.6746 | Time: 29.6123
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [54] Train Loss: 0.5154 | Train MAE: 0.5130 | Val Loss: 0.7330 | Val MAE: 0.7308 | Test MAE: 0.7808 | Time: 29.6253
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [55] Train Loss: 0.5088 | Train MAE: 0.5064 | Val Loss: 0.6512 | Val MAE: 0.6490 | Test MAE: 0.6727 | Time: 29.6806
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [56] Train Loss: 0.4903 | Train MAE: 0.4879 | Val Loss: 0.6199 | Val MAE: 0.6177 | Test MAE: 0.6683 | Time: 29.7780
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [57] Train Loss: 0.5210 | Train MAE: 0.5187 | Val Loss: 0.5851 | Val MAE: 0.5829 | Test MAE: 0.6215 | Time: 30.4267
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [58] Train Loss: 0.5383 | Train MAE: 0.5360 | Val Loss: 0.6062 | Val MAE: 0.6040 | Test MAE: 0.6647 | Time: 29.1345
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [59] Train Loss: 0.4925 | Train MAE: 0.4902 | Val Loss: 0.8080 | Val MAE: 0.8058 | Test MAE: 0.8245 | Time: 29.8433
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [60] Train Loss: 0.4934 | Train MAE: 0.4910 | Val Loss: 0.5737 | Val MAE: 0.5715 | Test MAE: 0.6163 | Time: 29.3111
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [61] Train Loss: 0.4849 | Train MAE: 0.4825 | Val Loss: 0.5970 | Val MAE: 0.5948 | Test MAE: 0.6372 | Time: 29.0999
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [62] Train Loss: 0.4847 | Train MAE: 0.4824 | Val Loss: 0.6825 | Val MAE: 0.6802 | Test MAE: 0.6959 | Time: 29.5037
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [63] Train Loss: 0.4644 | Train MAE: 0.4620 | Val Loss: 0.6972 | Val MAE: 0.6949 | Test MAE: 0.7122 | Time: 30.9352
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [64] Train Loss: 0.4600 | Train MAE: 0.4577 | Val Loss: 0.6037 | Val MAE: 0.6014 | Test MAE: 0.6324 | Time: 29.7826
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [65] Train Loss: 0.4616 | Train MAE: 0.4593 | Val Loss: 0.6018 | Val MAE: 0.5996 | Test MAE: 0.6363 | Time: 29.9061
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [66] Train Loss: 0.4551 | Train MAE: 0.4528 | Val Loss: 0.5734 | Val MAE: 0.5712 | Test MAE: 0.6348 | Time: 29.6345
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [67] Train Loss: 0.4821 | Train MAE: 0.4797 | Val Loss: 0.5685 | Val MAE: 0.5663 | Test MAE: 0.6259 | Time: 29.5741
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [68] Train Loss: 0.4659 | Train MAE: 0.4636 | Val Loss: 0.5948 | Val MAE: 0.5926 | Test MAE: 0.6315 | Time: 30.0850
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [69] Train Loss: 0.4391 | Train MAE: 0.4368 | Val Loss: 0.6265 | Val MAE: 0.6243 | Test MAE: 0.6588 | Time: 30.0686
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [70] Train Loss: 0.4605 | Train MAE: 0.4581 | Val Loss: 0.7381 | Val MAE: 0.7359 | Test MAE: 0.7853 | Time: 29.9893
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [71] Train Loss: 0.4751 | Train MAE: 0.4727 | Val Loss: 0.5822 | Val MAE: 0.5799 | Test MAE: 0.6221 | Time: 28.8473
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [72] Train Loss: 0.4493 | Train MAE: 0.4469 | Val Loss: 0.5886 | Val MAE: 0.5864 | Test MAE: 0.6448 | Time: 29.7013
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [73] Train Loss: 0.4601 | Train MAE: 0.4577 | Val Loss: 0.5902 | Val MAE: 0.5880 | Test MAE: 0.6272 | Time: 29.6493
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [74] Train Loss: 0.4441 | Train MAE: 0.4417 | Val Loss: 0.5899 | Val MAE: 0.5876 | Test MAE: 0.6440 | Time: 30.2493
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [75] Train Loss: 0.4453 | Train MAE: 0.4429 | Val Loss: 0.5836 | Val MAE: 0.5814 | Test MAE: 0.6468 | Time: 29.2811
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [76] Train Loss: 0.4494 | Train MAE: 0.4470 | Val Loss: 0.6044 | Val MAE: 0.6021 | Test MAE: 0.6478 | Time: 29.9493
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [77] Train Loss: 0.4307 | Train MAE: 0.4283 | Val Loss: 0.5623 | Val MAE: 0.5601 | Test MAE: 0.6198 | Time: 29.7146
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [78] Train Loss: 0.4219 | Train MAE: 0.4195 | Val Loss: 0.5700 | Val MAE: 0.5678 | Test MAE: 0.6159 | Time: 30.2552
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [79] Train Loss: 0.4350 | Train MAE: 0.4327 | Val Loss: 0.5953 | Val MAE: 0.5931 | Test MAE: 0.6274 | Time: 30.7991
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [80] Train Loss: 0.4182 | Train MAE: 0.4158 | Val Loss: 0.5918 | Val MAE: 0.5896 | Test MAE: 0.6529 | Time: 29.7056
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [81] Train Loss: 0.4206 | Train MAE: 0.4182 | Val Loss: 0.6192 | Val MAE: 0.6170 | Test MAE: 0.6676 | Time: 29.9686
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [82] Train Loss: 0.4522 | Train MAE: 0.4498 | Val Loss: 0.5839 | Val MAE: 0.5817 | Test MAE: 0.6412 | Time: 30.7860
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [83] Train Loss: 0.4238 | Train MAE: 0.4214 | Val Loss: 0.6211 | Val MAE: 0.6189 | Test MAE: 0.6611 | Time: 29.3293
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [84] Train Loss: 0.4238 | Train MAE: 0.4214 | Val Loss: 0.5679 | Val MAE: 0.5656 | Test MAE: 0.6310 | Time: 29.7844
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [85] Train Loss: 0.4086 | Train MAE: 0.4063 | Val Loss: 0.6325 | Val MAE: 0.6302 | Test MAE: 0.6871 | Time: 30.5383
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [86] Train Loss: 0.4100 | Train MAE: 0.4077 | Val Loss: 0.5837 | Val MAE: 0.5815 | Test MAE: 0.6245 | Time: 30.3816
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [87] Train Loss: 0.4094 | Train MAE: 0.4070 | Val Loss: 0.6178 | Val MAE: 0.6156 | Test MAE: 0.6666 | Time: 29.1298
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [88] Train Loss: 0.4205 | Train MAE: 0.4181 | Val Loss: 0.5938 | Val MAE: 0.5915 | Test MAE: 0.6350 | Time: 30.0614
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [89] Train Loss: 0.4092 | Train MAE: 0.4069 | Val Loss: 0.5599 | Val MAE: 0.5577 | Test MAE: 0.6172 | Time: 30.7979
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [90] Train Loss: 0.3983 | Train MAE: 0.3959 | Val Loss: 0.5605 | Val MAE: 0.5583 | Test MAE: 0.6082 | Time: 29.3840
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [91] Train Loss: 0.3966 | Train MAE: 0.3943 | Val Loss: 0.6811 | Val MAE: 0.6789 | Test MAE: 0.6908 | Time: 30.7593
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [92] Train Loss: 0.3953 | Train MAE: 0.3929 | Val Loss: 0.5782 | Val MAE: 0.5759 | Test MAE: 0.6284 | Time: 30.6738
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [93] Train Loss: 0.3928 | Train MAE: 0.3904 | Val Loss: 0.6409 | Val MAE: 0.6386 | Test MAE: 0.6852 | Time: 30.7070
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [94] Train Loss: 0.4140 | Train MAE: 0.4117 | Val Loss: 0.5651 | Val MAE: 0.5628 | Test MAE: 0.6116 | Time: 30.1327
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [95] Train Loss: 0.3807 | Train MAE: 0.3783 | Val Loss: 0.5863 | Val MAE: 0.5840 | Test MAE: 0.6365 | Time: 29.6850
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [96] Train Loss: 0.3881 | Train MAE: 0.3858 | Val Loss: 0.5867 | Val MAE: 0.5845 | Test MAE: 0.6188 | Time: 30.2909
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [97] Train Loss: 0.4171 | Train MAE: 0.4148 | Val Loss: 0.6115 | Val MAE: 0.6093 | Test MAE: 0.6634 | Time: 28.8201
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [98] Train Loss: 0.4002 | Train MAE: 0.3978 | Val Loss: 0.6401 | Val MAE: 0.6379 | Test MAE: 0.6917 | Time: 29.0674
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [99] Train Loss: 0.3949 | Train MAE: 0.3926 | Val Loss: 0.5758 | Val MAE: 0.5735 | Test MAE: 0.6268 | Time: 29.4183
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [100] Train Loss: 0.3747 | Train MAE: 0.3723 | Val Loss: 0.5831 | Val MAE: 0.5809 | Test MAE: 0.6343 | Time: 31.0490
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [101] Train Loss: 0.3871 | Train MAE: 0.3848 | Val Loss: 0.6028 | Val MAE: 0.6005 | Test MAE: 0.6451 | Time: 29.6071
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [102] Train Loss: 0.3830 | Train MAE: 0.3806 | Val Loss: 0.5791 | Val MAE: 0.5768 | Test MAE: 0.6068 | Time: 29.4055
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [103] Train Loss: 0.3863 | Train MAE: 0.3839 | Val Loss: 0.6256 | Val MAE: 0.6233 | Test MAE: 0.6742 | Time: 29.4268
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [104] Train Loss: 0.4077 | Train MAE: 0.4054 | Val Loss: 0.6275 | Val MAE: 0.6252 | Test MAE: 0.6800 | Time: 29.2692
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [105] Train Loss: 0.3812 | Train MAE: 0.3788 | Val Loss: 0.6018 | Val MAE: 0.5996 | Test MAE: 0.6222 | Time: 28.8336
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [106] Train Loss: 0.3689 | Train MAE: 0.3665 | Val Loss: 0.6027 | Val MAE: 0.6005 | Test MAE: 0.6292 | Time: 29.4513
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [107] Train Loss: 0.3800 | Train MAE: 0.3776 | Val Loss: 0.6789 | Val MAE: 0.6767 | Test MAE: 0.7325 | Time: 29.5798
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [108] Train Loss: 0.3902 | Train MAE: 0.3878 | Val Loss: 0.5725 | Val MAE: 0.5703 | Test MAE: 0.6218 | Time: 29.2345
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [109] Train Loss: 0.3831 | Train MAE: 0.3808 | Val Loss: 0.6010 | Val MAE: 0.5988 | Test MAE: 0.6470 | Time: 30.1616
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [110] Train Loss: 0.3643 | Train MAE: 0.3619 | Val Loss: 0.5850 | Val MAE: 0.5828 | Test MAE: 0.6213 | Time: 30.6614
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [111] Train Loss: 0.3716 | Train MAE: 0.3692 | Val Loss: 0.6675 | Val MAE: 0.6652 | Test MAE: 0.6754 | Time: 30.3839
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [112] Train Loss: 0.3845 | Train MAE: 0.3822 | Val Loss: 0.6275 | Val MAE: 0.6253 | Test MAE: 0.6701 | Time: 30.6650
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [113] Train Loss: 0.3820 | Train MAE: 0.3796 | Val Loss: 0.6113 | Val MAE: 0.6090 | Test MAE: 0.6331 | Time: 34.5792
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [114] Train Loss: 0.3716 | Train MAE: 0.3692 | Val Loss: 0.6439 | Val MAE: 0.6416 | Test MAE: 0.6877 | Time: 34.7072
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [115] Train Loss: 0.3727 | Train MAE: 0.3703 | Val Loss: 0.5990 | Val MAE: 0.5968 | Test MAE: 0.6313 | Time: 30.1045
Epoch 00116: reducing learning rate of group 0 to 5.0000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [116] Train Loss: 0.3530 | Train MAE: 0.3506 | Val Loss: 0.6036 | Val MAE: 0.6014 | Test MAE: 0.6449 | Time: 30.1508
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [117] Train Loss: 0.3340 | Train MAE: 0.3316 | Val Loss: 0.5741 | Val MAE: 0.5718 | Test MAE: 0.6036 | Time: 30.1006
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [118] Train Loss: 0.3265 | Train MAE: 0.3241 | Val Loss: 0.5815 | Val MAE: 0.5792 | Test MAE: 0.6090 | Time: 30.7513
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [119] Train Loss: 0.3208 | Train MAE: 0.3184 | Val Loss: 0.5780 | Val MAE: 0.5758 | Test MAE: 0.6086 | Time: 30.9242
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [120] Train Loss: 0.3120 | Train MAE: 0.3096 | Val Loss: 0.5785 | Val MAE: 0.5762 | Test MAE: 0.6102 | Time: 30.4822
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [121] Train Loss: 0.3098 | Train MAE: 0.3074 | Val Loss: 0.5689 | Val MAE: 0.5667 | Test MAE: 0.5998 | Time: 32.3018
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [122] Train Loss: 0.2945 | Train MAE: 0.2921 | Val Loss: 0.5774 | Val MAE: 0.5752 | Test MAE: 0.6201 | Time: 29.3245
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [123] Train Loss: 0.3051 | Train MAE: 0.3027 | Val Loss: 0.6254 | Val MAE: 0.6231 | Test MAE: 0.6646 | Time: 29.8105
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [124] Train Loss: 0.3262 | Train MAE: 0.3238 | Val Loss: 0.6474 | Val MAE: 0.6451 | Test MAE: 0.6929 | Time: 30.0111
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [125] Train Loss: 0.3077 | Train MAE: 0.3054 | Val Loss: 0.5691 | Val MAE: 0.5668 | Test MAE: 0.6047 | Time: 29.3173
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [126] Train Loss: 0.2986 | Train MAE: 0.2962 | Val Loss: 0.5793 | Val MAE: 0.5770 | Test MAE: 0.6047 | Time: 28.3738
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [127] Train Loss: 0.2885 | Train MAE: 0.2861 | Val Loss: 0.5908 | Val MAE: 0.5886 | Test MAE: 0.6181 | Time: 29.1965
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [128] Train Loss: 0.2893 | Train MAE: 0.2869 | Val Loss: 0.5735 | Val MAE: 0.5713 | Test MAE: 0.6081 | Time: 33.7818
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [129] Train Loss: 0.3083 | Train MAE: 0.3059 | Val Loss: 0.6366 | Val MAE: 0.6344 | Test MAE: 0.6537 | Time: 29.2784
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [130] Train Loss: 0.2931 | Train MAE: 0.2907 | Val Loss: 0.5978 | Val MAE: 0.5955 | Test MAE: 0.6413 | Time: 30.0930
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [131] Train Loss: 0.2838 | Train MAE: 0.2815 | Val Loss: 0.6267 | Val MAE: 0.6245 | Test MAE: 0.6667 | Time: 31.9308
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [132] Train Loss: 0.3143 | Train MAE: 0.3119 | Val Loss: 0.6670 | Val MAE: 0.6647 | Test MAE: 0.7122 | Time: 29.6578
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [133] Train Loss: 0.3192 | Train MAE: 0.3168 | Val Loss: 0.5918 | Val MAE: 0.5895 | Test MAE: 0.6346 | Time: 29.7815
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [134] Train Loss: 0.2939 | Train MAE: 0.2916 | Val Loss: 0.6073 | Val MAE: 0.6050 | Test MAE: 0.6526 | Time: 30.4200
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [135] Train Loss: 0.2809 | Train MAE: 0.2785 | Val Loss: 0.6664 | Val MAE: 0.6641 | Test MAE: 0.6739 | Time: 29.6056
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [136] Train Loss: 0.2980 | Train MAE: 0.2956 | Val Loss: 0.6235 | Val MAE: 0.6213 | Test MAE: 0.6557 | Time: 29.2837
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [137] Train Loss: 0.2922 | Train MAE: 0.2898 | Val Loss: 0.6184 | Val MAE: 0.6161 | Test MAE: 0.6395 | Time: 30.3877
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [138] Train Loss: 0.2809 | Train MAE: 0.2786 | Val Loss: 0.5925 | Val MAE: 0.5902 | Test MAE: 0.6162 | Time: 29.0054
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [139] Train Loss: 0.2653 | Train MAE: 0.2629 | Val Loss: 0.6025 | Val MAE: 0.6002 | Test MAE: 0.6483 | Time: 28.8235
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [140] Train Loss: 0.2649 | Train MAE: 0.2625 | Val Loss: 0.6182 | Val MAE: 0.6159 | Test MAE: 0.6591 | Time: 29.8792
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [141] Train Loss: 0.2792 | Train MAE: 0.2768 | Val Loss: 0.6168 | Val MAE: 0.6146 | Test MAE: 0.6288 | Time: 29.4721
Epoch 00142: reducing learning rate of group 0 to 2.5000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [142] Train Loss: 0.2636 | Train MAE: 0.2612 | Val Loss: 0.6138 | Val MAE: 0.6115 | Test MAE: 0.6183 | Time: 29.1890
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [143] Train Loss: 0.2493 | Train MAE: 0.2469 | Val Loss: 0.5998 | Val MAE: 0.5976 | Test MAE: 0.6400 | Time: 28.8762
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [144] Train Loss: 0.2457 | Train MAE: 0.2433 | Val Loss: 0.5870 | Val MAE: 0.5847 | Test MAE: 0.6159 | Time: 29.1548
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [145] Train Loss: 0.2440 | Train MAE: 0.2416 | Val Loss: 0.6122 | Val MAE: 0.6100 | Test MAE: 0.6273 | Time: 29.6118
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [146] Train Loss: 0.2470 | Train MAE: 0.2446 | Val Loss: 0.6224 | Val MAE: 0.6201 | Test MAE: 0.6288 | Time: 30.0999
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [147] Train Loss: 0.2443 | Train MAE: 0.2419 | Val Loss: 0.6162 | Val MAE: 0.6139 | Test MAE: 0.6258 | Time: 29.6868
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [148] Train Loss: 0.2436 | Train MAE: 0.2413 | Val Loss: 0.6223 | Val MAE: 0.6201 | Test MAE: 0.6561 | Time: 28.7366
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [149] Train Loss: 0.2307 | Train MAE: 0.2283 | Val Loss: 0.6755 | Val MAE: 0.6733 | Test MAE: 0.6747 | Time: 29.2036
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [150] Train Loss: 0.2442 | Train MAE: 0.2418 | Val Loss: 0.6389 | Val MAE: 0.6367 | Test MAE: 0.6706 | Time: 29.5592
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [151] Train Loss: 0.2395 | Train MAE: 0.2371 | Val Loss: 0.6337 | Val MAE: 0.6315 | Test MAE: 0.6344 | Time: 29.9204
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [152] Train Loss: 0.2580 | Train MAE: 0.2556 | Val Loss: 0.6011 | Val MAE: 0.5988 | Test MAE: 0.6320 | Time: 30.5204
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [153] Train Loss: 0.2403 | Train MAE: 0.2379 | Val Loss: 0.6050 | Val MAE: 0.6028 | Test MAE: 0.6325 | Time: 29.8460
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [154] Train Loss: 0.2271 | Train MAE: 0.2247 | Val Loss: 0.6237 | Val MAE: 0.6214 | Test MAE: 0.6586 | Time: 29.6717
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [155] Train Loss: 0.2420 | Train MAE: 0.2396 | Val Loss: 0.5926 | Val MAE: 0.5904 | Test MAE: 0.6243 | Time: 30.1135
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [156] Train Loss: 0.2402 | Train MAE: 0.2378 | Val Loss: 0.6166 | Val MAE: 0.6143 | Test MAE: 0.6236 | Time: 29.9622
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [157] Train Loss: 0.2231 | Train MAE: 0.2207 | Val Loss: 0.6008 | Val MAE: 0.5985 | Test MAE: 0.6350 | Time: 29.5210
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [158] Train Loss: 0.2323 | Train MAE: 0.2299 | Val Loss: 0.5907 | Val MAE: 0.5885 | Test MAE: 0.6315 | Time: 29.2520
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [159] Train Loss: 0.2345 | Train MAE: 0.2321 | Val Loss: 0.6175 | Val MAE: 0.6152 | Test MAE: 0.6484 | Time: 29.7502
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [160] Train Loss: 0.2226 | Train MAE: 0.2202 | Val Loss: 0.6617 | Val MAE: 0.6594 | Test MAE: 0.6584 | Time: 29.6138
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [161] Train Loss: 0.2186 | Train MAE: 0.2162 | Val Loss: 0.6106 | Val MAE: 0.6083 | Test MAE: 0.6223 | Time: 30.0270
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [162] Train Loss: 0.2260 | Train MAE: 0.2236 | Val Loss: 0.6335 | Val MAE: 0.6313 | Test MAE: 0.6423 | Time: 30.0389
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [163] Train Loss: 0.2208 | Train MAE: 0.2184 | Val Loss: 0.5885 | Val MAE: 0.5862 | Test MAE: 0.6109 | Time: 32.1644
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [164] Train Loss: 0.2264 | Train MAE: 0.2240 | Val Loss: 0.6136 | Val MAE: 0.6114 | Test MAE: 0.6204 | Time: 29.5503
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [165] Train Loss: 0.2171 | Train MAE: 0.2147 | Val Loss: 0.6123 | Val MAE: 0.6100 | Test MAE: 0.6225 | Time: 28.7092
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [166] Train Loss: 0.2291 | Train MAE: 0.2267 | Val Loss: 0.6234 | Val MAE: 0.6211 | Test MAE: 0.6358 | Time: 29.6292
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [167] Train Loss: 0.2169 | Train MAE: 0.2146 | Val Loss: 0.5996 | Val MAE: 0.5974 | Test MAE: 0.6228 | Time: 28.5187
Epoch 00168: reducing learning rate of group 0 to 1.2500e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [168] Train Loss: 0.2128 | Train MAE: 0.2104 | Val Loss: 0.5968 | Val MAE: 0.5945 | Test MAE: 0.6171 | Time: 33.1128
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [169] Train Loss: 0.2145 | Train MAE: 0.2121 | Val Loss: 0.6280 | Val MAE: 0.6257 | Test MAE: 0.6330 | Time: 30.3242
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [170] Train Loss: 0.2063 | Train MAE: 0.2039 | Val Loss: 0.5927 | Val MAE: 0.5904 | Test MAE: 0.6139 | Time: 29.0976
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [171] Train Loss: 0.2079 | Train MAE: 0.2055 | Val Loss: 0.6105 | Val MAE: 0.6083 | Test MAE: 0.6222 | Time: 29.4088
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [172] Train Loss: 0.2121 | Train MAE: 0.2097 | Val Loss: 0.6135 | Val MAE: 0.6112 | Test MAE: 0.6439 | Time: 29.4779
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [173] Train Loss: 0.1998 | Train MAE: 0.1975 | Val Loss: 0.5890 | Val MAE: 0.5868 | Test MAE: 0.6143 | Time: 30.1569
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [174] Train Loss: 0.1919 | Train MAE: 0.1895 | Val Loss: 0.6119 | Val MAE: 0.6096 | Test MAE: 0.6230 | Time: 30.3824
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [175] Train Loss: 0.2040 | Train MAE: 0.2016 | Val Loss: 0.5934 | Val MAE: 0.5912 | Test MAE: 0.6139 | Time: 30.6201
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [176] Train Loss: 0.1969 | Train MAE: 0.1945 | Val Loss: 0.6026 | Val MAE: 0.6003 | Test MAE: 0.6294 | Time: 28.9344
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [177] Train Loss: 0.2022 | Train MAE: 0.1998 | Val Loss: 0.6028 | Val MAE: 0.6005 | Test MAE: 0.6365 | Time: 29.2328
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [178] Train Loss: 0.2130 | Train MAE: 0.2106 | Val Loss: 0.6021 | Val MAE: 0.5998 | Test MAE: 0.6248 | Time: 30.9598
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [179] Train Loss: 0.1943 | Train MAE: 0.1920 | Val Loss: 0.6019 | Val MAE: 0.5996 | Test MAE: 0.6127 | Time: 29.5261
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [180] Train Loss: 0.1936 | Train MAE: 0.1912 | Val Loss: 0.6492 | Val MAE: 0.6469 | Test MAE: 0.6521 | Time: 29.6721
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [181] Train Loss: 0.2063 | Train MAE: 0.2039 | Val Loss: 0.6124 | Val MAE: 0.6102 | Test MAE: 0.6392 | Time: 30.2388
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [182] Train Loss: 0.1896 | Train MAE: 0.1872 | Val Loss: 0.6125 | Val MAE: 0.6102 | Test MAE: 0.6201 | Time: 30.8708
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [183] Train Loss: 0.2001 | Train MAE: 0.1977 | Val Loss: 0.6153 | Val MAE: 0.6131 | Test MAE: 0.6288 | Time: 30.6167
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [184] Train Loss: 0.1940 | Train MAE: 0.1916 | Val Loss: 0.6146 | Val MAE: 0.6123 | Test MAE: 0.6265 | Time: 29.0268
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [185] Train Loss: 0.2072 | Train MAE: 0.2048 | Val Loss: 0.6003 | Val MAE: 0.5980 | Test MAE: 0.6274 | Time: 29.8220
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [186] Train Loss: 0.2010 | Train MAE: 0.1986 | Val Loss: 0.6123 | Val MAE: 0.6100 | Test MAE: 0.6212 | Time: 30.2870
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [187] Train Loss: 0.1901 | Train MAE: 0.1878 | Val Loss: 0.5944 | Val MAE: 0.5921 | Test MAE: 0.6153 | Time: 29.4779
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [188] Train Loss: 0.1940 | Train MAE: 0.1916 | Val Loss: 0.6076 | Val MAE: 0.6054 | Test MAE: 0.6269 | Time: 29.7342
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [189] Train Loss: 0.1906 | Train MAE: 0.1882 | Val Loss: 0.6084 | Val MAE: 0.6062 | Test MAE: 0.6371 | Time: 30.6214
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [190] Train Loss: 0.1933 | Train MAE: 0.1909 | Val Loss: 0.6049 | Val MAE: 0.6026 | Test MAE: 0.6224 | Time: 30.2754
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [191] Train Loss: 0.2013 | Train MAE: 0.1989 | Val Loss: 0.6026 | Val MAE: 0.6004 | Test MAE: 0.6238 | Time: 28.7185
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [192] Train Loss: 0.1936 | Train MAE: 0.1912 | Val Loss: 0.6029 | Val MAE: 0.6006 | Test MAE: 0.6360 | Time: 29.8044
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [193] Train Loss: 0.1989 | Train MAE: 0.1965 | Val Loss: 0.6066 | Val MAE: 0.6043 | Test MAE: 0.6369 | Time: 30.0061
Epoch 00194: reducing learning rate of group 0 to 6.2500e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [194] Train Loss: 0.1804 | Train MAE: 0.1780 | Val Loss: 0.6153 | Val MAE: 0.6130 | Test MAE: 0.6359 | Time: 28.5560
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [195] Train Loss: 0.1740 | Train MAE: 0.1716 | Val Loss: 0.6057 | Val MAE: 0.6034 | Test MAE: 0.6208 | Time: 29.3503
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [196] Train Loss: 0.1817 | Train MAE: 0.1793 | Val Loss: 0.6036 | Val MAE: 0.6014 | Test MAE: 0.6207 | Time: 34.2514
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [197] Train Loss: 0.1789 | Train MAE: 0.1765 | Val Loss: 0.6034 | Val MAE: 0.6011 | Test MAE: 0.6283 | Time: 29.5731
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [198] Train Loss: 0.1858 | Train MAE: 0.1834 | Val Loss: 0.5985 | Val MAE: 0.5963 | Test MAE: 0.6169 | Time: 29.6904
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [199] Train Loss: 0.1926 | Train MAE: 0.1902 | Val Loss: 0.5926 | Val MAE: 0.5903 | Test MAE: 0.6122 | Time: 29.2618
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [200] Train Loss: 0.1830 | Train MAE: 0.1806 | Val Loss: 0.6177 | Val MAE: 0.6154 | Test MAE: 0.6278 | Time: 31.6189
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [201] Train Loss: 0.1865 | Train MAE: 0.1841 | Val Loss: 0.5989 | Val MAE: 0.5966 | Test MAE: 0.6170 | Time: 29.9140
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [202] Train Loss: 0.1752 | Train MAE: 0.1728 | Val Loss: 0.6090 | Val MAE: 0.6068 | Test MAE: 0.6340 | Time: 27.5243
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [203] Train Loss: 0.1783 | Train MAE: 0.1759 | Val Loss: 0.5944 | Val MAE: 0.5922 | Test MAE: 0.6139 | Time: 28.0534
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [204] Train Loss: 0.1795 | Train MAE: 0.1771 | Val Loss: 0.6027 | Val MAE: 0.6004 | Test MAE: 0.6159 | Time: 28.0695
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [205] Train Loss: 0.1759 | Train MAE: 0.1735 | Val Loss: 0.6098 | Val MAE: 0.6076 | Test MAE: 0.6209 | Time: 28.3711
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [206] Train Loss: 0.1698 | Train MAE: 0.1674 | Val Loss: 0.6060 | Val MAE: 0.6038 | Test MAE: 0.6221 | Time: 28.3147
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [207] Train Loss: 0.1797 | Train MAE: 0.1773 | Val Loss: 0.6153 | Val MAE: 0.6130 | Test MAE: 0.6231 | Time: 27.3555
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [208] Train Loss: 0.1769 | Train MAE: 0.1745 | Val Loss: 0.6022 | Val MAE: 0.6000 | Test MAE: 0.6178 | Time: 28.2312
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [209] Train Loss: 0.1697 | Train MAE: 0.1674 | Val Loss: 0.6086 | Val MAE: 0.6063 | Test MAE: 0.6219 | Time: 28.3216
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [210] Train Loss: 0.1775 | Train MAE: 0.1751 | Val Loss: 0.6010 | Val MAE: 0.5987 | Test MAE: 0.6203 | Time: 28.1249
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [211] Train Loss: 0.1734 | Train MAE: 0.1710 | Val Loss: 0.6098 | Val MAE: 0.6075 | Test MAE: 0.6231 | Time: 27.2392
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [212] Train Loss: 0.1810 | Train MAE: 0.1786 | Val Loss: 0.6188 | Val MAE: 0.6165 | Test MAE: 0.6301 | Time: 27.7315
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [213] Train Loss: 0.1834 | Train MAE: 0.1810 | Val Loss: 0.6117 | Val MAE: 0.6095 | Test MAE: 0.6305 | Time: 28.3293
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [214] Train Loss: 0.1820 | Train MAE: 0.1796 | Val Loss: 0.5996 | Val MAE: 0.5973 | Test MAE: 0.6175 | Time: 29.1336
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [215] Train Loss: 0.1834 | Train MAE: 0.1810 | Val Loss: 0.5903 | Val MAE: 0.5881 | Test MAE: 0.6116 | Time: 27.6472
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [216] Train Loss: 0.1756 | Train MAE: 0.1732 | Val Loss: 0.6117 | Val MAE: 0.6095 | Test MAE: 0.6257 | Time: 27.9880
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [217] Train Loss: 0.1781 | Train MAE: 0.1757 | Val Loss: 0.6022 | Val MAE: 0.5999 | Test MAE: 0.6186 | Time: 29.1024
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [218] Train Loss: 0.1797 | Train MAE: 0.1773 | Val Loss: 0.6114 | Val MAE: 0.6091 | Test MAE: 0.6199 | Time: 27.5677
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [219] Train Loss: 0.1736 | Train MAE: 0.1712 | Val Loss: 0.6236 | Val MAE: 0.6214 | Test MAE: 0.6287 | Time: 27.9995
Epoch 00220: reducing learning rate of group 0 to 3.1250e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [220] Train Loss: 0.1704 | Train MAE: 0.1681 | Val Loss: 0.6009 | Val MAE: 0.5987 | Test MAE: 0.6155 | Time: 28.0646
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [221] Train Loss: 0.1647 | Train MAE: 0.1623 | Val Loss: 0.6053 | Val MAE: 0.6030 | Test MAE: 0.6205 | Time: 28.0736
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [222] Train Loss: 0.1672 | Train MAE: 0.1648 | Val Loss: 0.6111 | Val MAE: 0.6088 | Test MAE: 0.6296 | Time: 27.9921
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [223] Train Loss: 0.1674 | Train MAE: 0.1650 | Val Loss: 0.6063 | Val MAE: 0.6040 | Test MAE: 0.6195 | Time: 28.0694
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [224] Train Loss: 0.1668 | Train MAE: 0.1644 | Val Loss: 0.6091 | Val MAE: 0.6068 | Test MAE: 0.6213 | Time: 31.1547
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [225] Train Loss: 0.1733 | Train MAE: 0.1709 | Val Loss: 0.6134 | Val MAE: 0.6111 | Test MAE: 0.6210 | Time: 27.6605
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [226] Train Loss: 0.1665 | Train MAE: 0.1641 | Val Loss: 0.6134 | Val MAE: 0.6111 | Test MAE: 0.6299 | Time: 28.0492
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [227] Train Loss: 0.1724 | Train MAE: 0.1700 | Val Loss: 0.6179 | Val MAE: 0.6157 | Test MAE: 0.6300 | Time: 28.9131
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [228] Train Loss: 0.1664 | Train MAE: 0.1640 | Val Loss: 0.6233 | Val MAE: 0.6211 | Test MAE: 0.6261 | Time: 31.1480
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [229] Train Loss: 0.1680 | Train MAE: 0.1656 | Val Loss: 0.6021 | Val MAE: 0.5998 | Test MAE: 0.6230 | Time: 28.1141
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [230] Train Loss: 0.1645 | Train MAE: 0.1621 | Val Loss: 0.6008 | Val MAE: 0.5985 | Test MAE: 0.6130 | Time: 28.9411
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [231] Train Loss: 0.1625 | Train MAE: 0.1601 | Val Loss: 0.6068 | Val MAE: 0.6045 | Test MAE: 0.6194 | Time: 27.6043
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [232] Train Loss: 0.1686 | Train MAE: 0.1662 | Val Loss: 0.5983 | Val MAE: 0.5961 | Test MAE: 0.6146 | Time: 28.0597
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [233] Train Loss: 0.1698 | Train MAE: 0.1674 | Val Loss: 0.6074 | Val MAE: 0.6051 | Test MAE: 0.6251 | Time: 28.3445
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [234] Train Loss: 0.1616 | Train MAE: 0.1592 | Val Loss: 0.6090 | Val MAE: 0.6068 | Test MAE: 0.6223 | Time: 28.0946
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [235] Train Loss: 0.1670 | Train MAE: 0.1646 | Val Loss: 0.6208 | Val MAE: 0.6185 | Test MAE: 0.6341 | Time: 27.2620
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [236] Train Loss: 0.1643 | Train MAE: 0.1619 | Val Loss: 0.6110 | Val MAE: 0.6088 | Test MAE: 0.6275 | Time: 27.6086
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [237] Train Loss: 0.1682 | Train MAE: 0.1658 | Val Loss: 0.6134 | Val MAE: 0.6111 | Test MAE: 0.6251 | Time: 28.2424
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [238] Train Loss: 0.1664 | Train MAE: 0.1640 | Val Loss: 0.6028 | Val MAE: 0.6005 | Test MAE: 0.6161 | Time: 28.7125
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [239] Train Loss: 0.1669 | Train MAE: 0.1645 | Val Loss: 0.5997 | Val MAE: 0.5974 | Test MAE: 0.6155 | Time: 27.4812
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [240] Train Loss: 0.1656 | Train MAE: 0.1632 | Val Loss: 0.6142 | Val MAE: 0.6119 | Test MAE: 0.6240 | Time: 32.0741
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [241] Train Loss: 0.1678 | Train MAE: 0.1654 | Val Loss: 0.6140 | Val MAE: 0.6117 | Test MAE: 0.6286 | Time: 27.4861
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [242] Train Loss: 0.1661 | Train MAE: 0.1637 | Val Loss: 0.6015 | Val MAE: 0.5992 | Test MAE: 0.6221 | Time: 27.7450
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [243] Train Loss: 0.1655 | Train MAE: 0.1631 | Val Loss: 0.6235 | Val MAE: 0.6212 | Test MAE: 0.6330 | Time: 31.5679
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [244] Train Loss: 0.1734 | Train MAE: 0.1711 | Val Loss: 0.6211 | Val MAE: 0.6189 | Test MAE: 0.6391 | Time: 29.0350
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [245] Train Loss: 0.1708 | Train MAE: 0.1684 | Val Loss: 0.6067 | Val MAE: 0.6045 | Test MAE: 0.6210 | Time: 27.6837
Epoch 00246: reducing learning rate of group 0 to 1.5625e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [246] Train Loss: 0.1578 | Train MAE: 0.1554 | Val Loss: 0.6144 | Val MAE: 0.6122 | Test MAE: 0.6286 | Time: 31.5883
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [247] Train Loss: 0.1684 | Train MAE: 0.1660 | Val Loss: 0.6044 | Val MAE: 0.6022 | Test MAE: 0.6209 | Time: 29.1138
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [248] Train Loss: 0.1626 | Train MAE: 0.1602 | Val Loss: 0.6069 | Val MAE: 0.6047 | Test MAE: 0.6196 | Time: 28.9606
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [249] Train Loss: 0.1618 | Train MAE: 0.1594 | Val Loss: 0.6017 | Val MAE: 0.5994 | Test MAE: 0.6190 | Time: 27.7344
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [250] Train Loss: 0.1532 | Train MAE: 0.1508 | Val Loss: 0.6134 | Val MAE: 0.6112 | Test MAE: 0.6292 | Time: 29.1565
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [251] Train Loss: 0.1665 | Train MAE: 0.1641 | Val Loss: 0.6104 | Val MAE: 0.6081 | Test MAE: 0.6249 | Time: 30.7829
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [252] Train Loss: 0.1593 | Train MAE: 0.1570 | Val Loss: 0.6144 | Val MAE: 0.6121 | Test MAE: 0.6288 | Time: 35.1240
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [253] Train Loss: 0.1586 | Train MAE: 0.1562 | Val Loss: 0.6076 | Val MAE: 0.6053 | Test MAE: 0.6239 | Time: 30.0392
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [254] Train Loss: 0.1670 | Train MAE: 0.1646 | Val Loss: 0.6217 | Val MAE: 0.6195 | Test MAE: 0.6434 | Time: 30.0970
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [255] Train Loss: 0.1619 | Train MAE: 0.1596 | Val Loss: 0.6166 | Val MAE: 0.6143 | Test MAE: 0.6338 | Time: 29.2978
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [256] Train Loss: 0.1646 | Train MAE: 0.1622 | Val Loss: 0.6188 | Val MAE: 0.6165 | Test MAE: 0.6323 | Time: 33.8734
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [257] Train Loss: 0.1694 | Train MAE: 0.1670 | Val Loss: 0.6088 | Val MAE: 0.6065 | Test MAE: 0.6252 | Time: 34.0469
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [258] Train Loss: 0.1607 | Train MAE: 0.1583 | Val Loss: 0.6001 | Val MAE: 0.5978 | Test MAE: 0.6157 | Time: 30.1807
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [259] Train Loss: 0.1582 | Train MAE: 0.1558 | Val Loss: 0.6109 | Val MAE: 0.6086 | Test MAE: 0.6276 | Time: 30.0056
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [260] Train Loss: 0.1547 | Train MAE: 0.1523 | Val Loss: 0.6045 | Val MAE: 0.6022 | Test MAE: 0.6193 | Time: 30.4552
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [261] Train Loss: 0.1537 | Train MAE: 0.1513 | Val Loss: 0.6057 | Val MAE: 0.6034 | Test MAE: 0.6193 | Time: 30.2928
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [262] Train Loss: 0.1601 | Train MAE: 0.1577 | Val Loss: 0.6154 | Val MAE: 0.6132 | Test MAE: 0.6336 | Time: 29.4556
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [263] Train Loss: 0.1579 | Train MAE: 0.1555 | Val Loss: 0.6123 | Val MAE: 0.6101 | Test MAE: 0.6298 | Time: 29.2213
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [264] Train Loss: 0.1553 | Train MAE: 0.1529 | Val Loss: 0.6101 | Val MAE: 0.6078 | Test MAE: 0.6234 | Time: 30.4135
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [265] Train Loss: 0.1583 | Train MAE: 0.1559 | Val Loss: 0.6026 | Val MAE: 0.6004 | Test MAE: 0.6222 | Time: 30.1062
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [266] Train Loss: 0.1582 | Train MAE: 0.1558 | Val Loss: 0.6028 | Val MAE: 0.6005 | Test MAE: 0.6204 | Time: 29.2515
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [267] Train Loss: 0.1557 | Train MAE: 0.1533 | Val Loss: 0.6085 | Val MAE: 0.6062 | Test MAE: 0.6234 | Time: 28.3099
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [268] Train Loss: 0.1650 | Train MAE: 0.1626 | Val Loss: 0.6182 | Val MAE: 0.6159 | Test MAE: 0.6354 | Time: 30.6257
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [269] Train Loss: 0.1525 | Train MAE: 0.1501 | Val Loss: 0.6149 | Val MAE: 0.6126 | Test MAE: 0.6306 | Time: 30.1522
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [270] Train Loss: 0.1669 | Train MAE: 0.1645 | Val Loss: 0.6157 | Val MAE: 0.6134 | Test MAE: 0.6329 | Time: 29.3959
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [271] Train Loss: 0.1594 | Train MAE: 0.1571 | Val Loss: 0.6104 | Val MAE: 0.6081 | Test MAE: 0.6243 | Time: 30.4131
Epoch 00272: reducing learning rate of group 0 to 7.8125e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [272] Train Loss: 0.1628 | Train MAE: 0.1605 | Val Loss: 0.6093 | Val MAE: 0.6071 | Test MAE: 0.6220 | Time: 29.7318
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [273] Train Loss: 0.1628 | Train MAE: 0.1604 | Val Loss: 0.6202 | Val MAE: 0.6179 | Test MAE: 0.6343 | Time: 31.6471
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [274] Train Loss: 0.1546 | Train MAE: 0.1523 | Val Loss: 0.6118 | Val MAE: 0.6095 | Test MAE: 0.6236 | Time: 31.4895
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [275] Train Loss: 0.1649 | Train MAE: 0.1625 | Val Loss: 0.6079 | Val MAE: 0.6057 | Test MAE: 0.6203 | Time: 28.0571
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [276] Train Loss: 0.1587 | Train MAE: 0.1563 | Val Loss: 0.6178 | Val MAE: 0.6156 | Test MAE: 0.6323 | Time: 28.5967
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [277] Train Loss: 0.1536 | Train MAE: 0.1512 | Val Loss: 0.6067 | Val MAE: 0.6045 | Test MAE: 0.6191 | Time: 27.3279
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [278] Train Loss: 0.1600 | Train MAE: 0.1576 | Val Loss: 0.5989 | Val MAE: 0.5967 | Test MAE: 0.6112 | Time: 28.0426
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [279] Train Loss: 0.1596 | Train MAE: 0.1572 | Val Loss: 0.6153 | Val MAE: 0.6130 | Test MAE: 0.6285 | Time: 28.1343
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [280] Train Loss: 0.1538 | Train MAE: 0.1514 | Val Loss: 0.6113 | Val MAE: 0.6091 | Test MAE: 0.6274 | Time: 28.2125
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [281] Train Loss: 0.1575 | Train MAE: 0.1551 | Val Loss: 0.6267 | Val MAE: 0.6244 | Test MAE: 0.6403 | Time: 28.0272
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [282] Train Loss: 0.1530 | Train MAE: 0.1506 | Val Loss: 0.6159 | Val MAE: 0.6137 | Test MAE: 0.6321 | Time: 30.9469
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [283] Train Loss: 0.1533 | Train MAE: 0.1509 | Val Loss: 0.6081 | Val MAE: 0.6058 | Test MAE: 0.6218 | Time: 28.3534
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [284] Train Loss: 0.1659 | Train MAE: 0.1635 | Val Loss: 0.6140 | Val MAE: 0.6118 | Test MAE: 0.6274 | Time: 28.2716
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [285] Train Loss: 0.1558 | Train MAE: 0.1534 | Val Loss: 0.6135 | Val MAE: 0.6112 | Test MAE: 0.6305 | Time: 27.8130
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [286] Train Loss: 0.1580 | Train MAE: 0.1556 | Val Loss: 0.5953 | Val MAE: 0.5930 | Test MAE: 0.6119 | Time: 27.8714
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [287] Train Loss: 0.1526 | Train MAE: 0.1502 | Val Loss: 0.6113 | Val MAE: 0.6090 | Test MAE: 0.6242 | Time: 27.6213
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [288] Train Loss: 0.1584 | Train MAE: 0.1560 | Val Loss: 0.6072 | Val MAE: 0.6050 | Test MAE: 0.6192 | Time: 27.3671
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [289] Train Loss: 0.1618 | Train MAE: 0.1594 | Val Loss: 0.6031 | Val MAE: 0.6008 | Test MAE: 0.6159 | Time: 28.4251
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [290] Train Loss: 0.1635 | Train MAE: 0.1612 | Val Loss: 0.6077 | Val MAE: 0.6054 | Test MAE: 0.6214 | Time: 28.2319
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [291] Train Loss: 0.1537 | Train MAE: 0.1513 | Val Loss: 0.6077 | Val MAE: 0.6054 | Test MAE: 0.6215 | Time: 28.1816
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [292] Train Loss: 0.1579 | Train MAE: 0.1555 | Val Loss: 0.6136 | Val MAE: 0.6113 | Test MAE: 0.6276 | Time: 28.3541
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [293] Train Loss: 0.1617 | Train MAE: 0.1593 | Val Loss: 0.6164 | Val MAE: 0.6142 | Test MAE: 0.6323 | Time: 33.1172
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [294] Train Loss: 0.1514 | Train MAE: 0.1490 | Val Loss: 0.6055 | Val MAE: 0.6032 | Test MAE: 0.6194 | Time: 29.3240
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [295] Train Loss: 0.1611 | Train MAE: 0.1587 | Val Loss: 0.6180 | Val MAE: 0.6158 | Test MAE: 0.6322 | Time: 28.8083
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [296] Train Loss: 0.1492 | Train MAE: 0.1468 | Val Loss: 0.6153 | Val MAE: 0.6130 | Test MAE: 0.6309 | Time: 29.1266
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [297] Train Loss: 0.1589 | Train MAE: 0.1565 | Val Loss: 0.6075 | Val MAE: 0.6052 | Test MAE: 0.6225 | Time: 28.2843
Epoch 00298: reducing learning rate of group 0 to 3.9063e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [298] Train Loss: 0.1626 | Train MAE: 0.1602 | Val Loss: 0.6193 | Val MAE: 0.6170 | Test MAE: 0.6339 | Time: 28.8513
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [299] Train Loss: 0.1562 | Train MAE: 0.1538 | Val Loss: 0.6080 | Val MAE: 0.6058 | Test MAE: 0.6215 | Time: 28.5020
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [300] Train Loss: 0.1550 | Train MAE: 0.1526 | Val Loss: 0.6127 | Val MAE: 0.6105 | Test MAE: 0.6261 | Time: 28.4601
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [301] Train Loss: 0.1541 | Train MAE: 0.1517 | Val Loss: 0.6116 | Val MAE: 0.6093 | Test MAE: 0.6230 | Time: 28.2617
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [302] Train Loss: 0.1550 | Train MAE: 0.1527 | Val Loss: 0.6058 | Val MAE: 0.6036 | Test MAE: 0.6201 | Time: 28.2669
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [303] Train Loss: 0.1540 | Train MAE: 0.1516 | Val Loss: 0.6112 | Val MAE: 0.6089 | Test MAE: 0.6249 | Time: 28.2192
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [304] Train Loss: 0.1618 | Train MAE: 0.1595 | Val Loss: 0.6170 | Val MAE: 0.6148 | Test MAE: 0.6303 | Time: 27.5353
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [305] Train Loss: 0.1547 | Train MAE: 0.1523 | Val Loss: 0.6172 | Val MAE: 0.6150 | Test MAE: 0.6315 | Time: 28.6811
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [306] Train Loss: 0.1554 | Train MAE: 0.1530 | Val Loss: 0.6106 | Val MAE: 0.6084 | Test MAE: 0.6259 | Time: 28.2582
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [307] Train Loss: 0.1588 | Train MAE: 0.1564 | Val Loss: 0.6161 | Val MAE: 0.6138 | Test MAE: 0.6300 | Time: 27.8263
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [308] Train Loss: 0.1510 | Train MAE: 0.1486 | Val Loss: 0.6128 | Val MAE: 0.6106 | Test MAE: 0.6279 | Time: 27.7675
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [309] Train Loss: 0.1566 | Train MAE: 0.1542 | Val Loss: 0.6075 | Val MAE: 0.6052 | Test MAE: 0.6191 | Time: 28.8065
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [310] Train Loss: 0.1542 | Train MAE: 0.1518 | Val Loss: 0.6100 | Val MAE: 0.6077 | Test MAE: 0.6226 | Time: 28.9070
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [311] Train Loss: 0.1554 | Train MAE: 0.1530 | Val Loss: 0.6058 | Val MAE: 0.6035 | Test MAE: 0.6217 | Time: 28.1247
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [312] Train Loss: 0.1516 | Train MAE: 0.1492 | Val Loss: 0.6097 | Val MAE: 0.6074 | Test MAE: 0.6230 | Time: 28.1459
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [313] Train Loss: 0.1554 | Train MAE: 0.1530 | Val Loss: 0.6161 | Val MAE: 0.6138 | Test MAE: 0.6320 | Time: 28.8993
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [314] Train Loss: 0.1501 | Train MAE: 0.1477 | Val Loss: 0.6103 | Val MAE: 0.6080 | Test MAE: 0.6240 | Time: 28.7678
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [315] Train Loss: 0.1542 | Train MAE: 0.1518 | Val Loss: 0.6141 | Val MAE: 0.6119 | Test MAE: 0.6284 | Time: 27.9732
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [316] Train Loss: 0.1583 | Train MAE: 0.1559 | Val Loss: 0.6041 | Val MAE: 0.6019 | Test MAE: 0.6173 | Time: 28.2180
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [317] Train Loss: 0.1564 | Train MAE: 0.1540 | Val Loss: 0.6140 | Val MAE: 0.6117 | Test MAE: 0.6269 | Time: 28.4800
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [318] Train Loss: 0.1512 | Train MAE: 0.1488 | Val Loss: 0.6086 | Val MAE: 0.6064 | Test MAE: 0.6230 | Time: 27.9645
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [319] Train Loss: 0.1527 | Train MAE: 0.1504 | Val Loss: 0.6088 | Val MAE: 0.6065 | Test MAE: 0.6229 | Time: 28.6167
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [320] Train Loss: 0.1533 | Train MAE: 0.1509 | Val Loss: 0.6123 | Val MAE: 0.6100 | Test MAE: 0.6254 | Time: 27.1157
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [321] Train Loss: 0.1623 | Train MAE: 0.1599 | Val Loss: 0.6061 | Val MAE: 0.6038 | Test MAE: 0.6184 | Time: 27.9611
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [322] Train Loss: 0.1633 | Train MAE: 0.1609 | Val Loss: 0.6186 | Val MAE: 0.6163 | Test MAE: 0.6320 | Time: 28.3050
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [323] Train Loss: 0.1492 | Train MAE: 0.1468 | Val Loss: 0.6120 | Val MAE: 0.6098 | Test MAE: 0.6278 | Time: 27.9820
Epoch 00324: reducing learning rate of group 0 to 1.9531e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [324] Train Loss: 0.1589 | Train MAE: 0.1565 | Val Loss: 0.6118 | Val MAE: 0.6095 | Test MAE: 0.6285 | Time: 29.0380
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [325] Train Loss: 0.1627 | Train MAE: 0.1603 | Val Loss: 0.6011 | Val MAE: 0.5989 | Test MAE: 0.6155 | Time: 27.5535
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [326] Train Loss: 0.1696 | Train MAE: 0.1672 | Val Loss: 0.6254 | Val MAE: 0.6231 | Test MAE: 0.6416 | Time: 27.5826
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [327] Train Loss: 0.1489 | Train MAE: 0.1465 | Val Loss: 0.6103 | Val MAE: 0.6081 | Test MAE: 0.6247 | Time: 28.3241
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [328] Train Loss: 0.1533 | Train MAE: 0.1509 | Val Loss: 0.6084 | Val MAE: 0.6061 | Test MAE: 0.6219 | Time: 28.6287
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [329] Train Loss: 0.1634 | Train MAE: 0.1610 | Val Loss: 0.6152 | Val MAE: 0.6130 | Test MAE: 0.6324 | Time: 29.0298
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [330] Train Loss: 0.1574 | Train MAE: 0.1550 | Val Loss: 0.6197 | Val MAE: 0.6174 | Test MAE: 0.6358 | Time: 27.4711
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [331] Train Loss: 0.1557 | Train MAE: 0.1533 | Val Loss: 0.6053 | Val MAE: 0.6031 | Test MAE: 0.6203 | Time: 27.7791
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [332] Train Loss: 0.1545 | Train MAE: 0.1521 | Val Loss: 0.6085 | Val MAE: 0.6063 | Test MAE: 0.6255 | Time: 30.6670
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [333] Train Loss: 0.1506 | Train MAE: 0.1482 | Val Loss: 0.6119 | Val MAE: 0.6096 | Test MAE: 0.6273 | Time: 27.1636
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [334] Train Loss: 0.1584 | Train MAE: 0.1560 | Val Loss: 0.6215 | Val MAE: 0.6193 | Test MAE: 0.6369 | Time: 28.0583
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [335] Train Loss: 0.1526 | Train MAE: 0.1502 | Val Loss: 0.6255 | Val MAE: 0.6233 | Test MAE: 0.6395 | Time: 31.5089
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [336] Train Loss: 0.1550 | Train MAE: 0.1526 | Val Loss: 0.6141 | Val MAE: 0.6118 | Test MAE: 0.6297 | Time: 27.0658
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [337] Train Loss: 0.1491 | Train MAE: 0.1468 | Val Loss: 0.6081 | Val MAE: 0.6059 | Test MAE: 0.6219 | Time: 27.5625
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [338] Train Loss: 0.1560 | Train MAE: 0.1536 | Val Loss: 0.6162 | Val MAE: 0.6140 | Test MAE: 0.6319 | Time: 27.9367
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [339] Train Loss: 0.1524 | Train MAE: 0.1500 | Val Loss: 0.6010 | Val MAE: 0.5987 | Test MAE: 0.6157 | Time: 28.0235
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [340] Train Loss: 0.1601 | Train MAE: 0.1577 | Val Loss: 0.6018 | Val MAE: 0.5995 | Test MAE: 0.6190 | Time: 27.0323
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [341] Train Loss: 0.1535 | Train MAE: 0.1511 | Val Loss: 0.5979 | Val MAE: 0.5957 | Test MAE: 0.6152 | Time: 27.7750
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [342] Train Loss: 0.1538 | Train MAE: 0.1514 | Val Loss: 0.6084 | Val MAE: 0.6061 | Test MAE: 0.6237 | Time: 27.8230
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [343] Train Loss: 0.1531 | Train MAE: 0.1507 | Val Loss: 0.6184 | Val MAE: 0.6161 | Test MAE: 0.6337 | Time: 28.3249
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [344] Train Loss: 0.1616 | Train MAE: 0.1593 | Val Loss: 0.6108 | Val MAE: 0.6086 | Test MAE: 0.6254 | Time: 27.0821
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [345] Train Loss: 0.1501 | Train MAE: 0.1477 | Val Loss: 0.6000 | Val MAE: 0.5978 | Test MAE: 0.6129 | Time: 27.8505
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [346] Train Loss: 0.1540 | Train MAE: 0.1516 | Val Loss: 0.6036 | Val MAE: 0.6013 | Test MAE: 0.6171 | Time: 27.9350
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [347] Train Loss: 0.1539 | Train MAE: 0.1515 | Val Loss: 0.6099 | Val MAE: 0.6077 | Test MAE: 0.6215 | Time: 28.0288
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [348] Train Loss: 0.1550 | Train MAE: 0.1526 | Val Loss: 0.6223 | Val MAE: 0.6201 | Test MAE: 0.6396 | Time: 28.3654
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [349] Train Loss: 0.1531 | Train MAE: 0.1507 | Val Loss: 0.6155 | Val MAE: 0.6132 | Test MAE: 0.6314 | Time: 27.3517
Epoch 00350: reducing learning rate of group 0 to 9.7656e-07.

!! LR EQUAL TO MIN LR SET.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Test MAE: 0.6314
Train MAE: 0.1054
Convergence Time (Epochs): 349.0000
TOTAL TIME TAKEN: 10437.3909s
AVG TIME PER EPOCH: 29.4776s
