WARNING:root:The OGB package is out of date. Your version is 1.3.3, while the latest version is 1.3.4.
cuda available with GPU: NVIDIA GeForce GTX 1080 Ti
[I] Loading dataset ZINC...
train, test, val sizes : 10000 1000 1000
[I] Finished loading.
[I] Data load time: 11.1498s
MODEL DETAILS:

MODEL/Total parameters: GatedGCN 521337
[!] Adding random automaton graph positional encoding (8).
Time PE:10.814768075942993
Training Graphs:  10000
Validation Graphs:  1000
Test Graphs:  1000
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [0] Train Loss: 0.7532 | Train MAE: 0.7529 | Val Loss: 1.1798 | Val MAE: 1.1795 | Test MAE: 1.2383 | Time: 22.5159
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [1] Train Loss: 0.5261 | Train MAE: 0.5257 | Val Loss: 2.3354 | Val MAE: 2.3350 | Test MAE: 2.3220 | Time: 22.1203
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [2] Train Loss: 0.5012 | Train MAE: 0.5009 | Val Loss: 1.3337 | Val MAE: 1.3334 | Test MAE: 1.3660 | Time: 22.6079
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [3] Train Loss: 0.4535 | Train MAE: 0.4532 | Val Loss: 0.8455 | Val MAE: 0.8451 | Test MAE: 0.8739 | Time: 21.8283
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [4] Train Loss: 0.4203 | Train MAE: 0.4200 | Val Loss: 0.6759 | Val MAE: 0.6755 | Test MAE: 0.7175 | Time: 22.1090
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [5] Train Loss: 0.4146 | Train MAE: 0.4143 | Val Loss: 1.0051 | Val MAE: 1.0048 | Test MAE: 1.0152 | Time: 22.1834
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [6] Train Loss: 0.4518 | Train MAE: 0.4515 | Val Loss: 0.7488 | Val MAE: 0.7485 | Test MAE: 0.7644 | Time: 22.4644
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [7] Train Loss: 0.4069 | Train MAE: 0.4066 | Val Loss: 0.4092 | Val MAE: 0.4089 | Test MAE: 0.4428 | Time: 23.2524
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [8] Train Loss: 0.4192 | Train MAE: 0.4189 | Val Loss: 0.7756 | Val MAE: 0.7753 | Test MAE: 0.7937 | Time: 23.5092
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [9] Train Loss: 0.3654 | Train MAE: 0.3651 | Val Loss: 0.4621 | Val MAE: 0.4618 | Test MAE: 0.4775 | Time: 23.3266
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [10] Train Loss: 0.3793 | Train MAE: 0.3789 | Val Loss: 0.4494 | Val MAE: 0.4491 | Test MAE: 0.4818 | Time: 24.5557
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [11] Train Loss: 0.3697 | Train MAE: 0.3694 | Val Loss: 1.0579 | Val MAE: 1.0576 | Test MAE: 1.1117 | Time: 23.1732
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [12] Train Loss: 0.3545 | Train MAE: 0.3542 | Val Loss: 0.4645 | Val MAE: 0.4642 | Test MAE: 0.5032 | Time: 23.3822
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [13] Train Loss: 0.3614 | Train MAE: 0.3610 | Val Loss: 0.3891 | Val MAE: 0.3888 | Test MAE: 0.4320 | Time: 22.6492
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [14] Train Loss: 0.3468 | Train MAE: 0.3464 | Val Loss: 0.7263 | Val MAE: 0.7260 | Test MAE: 0.7672 | Time: 22.7845
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [15] Train Loss: 0.3473 | Train MAE: 0.3469 | Val Loss: 0.4844 | Val MAE: 0.4841 | Test MAE: 0.4940 | Time: 23.4601
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [16] Train Loss: 0.3409 | Train MAE: 0.3406 | Val Loss: 1.0722 | Val MAE: 1.0719 | Test MAE: 1.0765 | Time: 25.1444
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [17] Train Loss: 0.3463 | Train MAE: 0.3460 | Val Loss: 0.8410 | Val MAE: 0.8407 | Test MAE: 0.8358 | Time: 23.0793
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [18] Train Loss: 0.3163 | Train MAE: 0.3160 | Val Loss: 0.3367 | Val MAE: 0.3364 | Test MAE: 0.3242 | Time: 25.1487
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [19] Train Loss: 0.3018 | Train MAE: 0.3015 | Val Loss: 0.9537 | Val MAE: 0.9534 | Test MAE: 0.9512 | Time: 22.8473
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [20] Train Loss: 0.3078 | Train MAE: 0.3075 | Val Loss: 0.2914 | Val MAE: 0.2911 | Test MAE: 0.2848 | Time: 25.1211
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [21] Train Loss: 0.2812 | Train MAE: 0.2809 | Val Loss: 0.4307 | Val MAE: 0.4304 | Test MAE: 0.4236 | Time: 23.1282
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [22] Train Loss: 0.2790 | Train MAE: 0.2787 | Val Loss: 0.7138 | Val MAE: 0.7135 | Test MAE: 0.7119 | Time: 23.1447
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [23] Train Loss: 0.2701 | Train MAE: 0.2697 | Val Loss: 0.5652 | Val MAE: 0.5649 | Test MAE: 0.5573 | Time: 22.9841
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [24] Train Loss: 0.2665 | Train MAE: 0.2662 | Val Loss: 1.4332 | Val MAE: 1.4329 | Test MAE: 1.4205 | Time: 22.8910
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [25] Train Loss: 0.2622 | Train MAE: 0.2619 | Val Loss: 0.4459 | Val MAE: 0.4456 | Test MAE: 0.4068 | Time: 23.2204
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [26] Train Loss: 0.2489 | Train MAE: 0.2486 | Val Loss: 0.3013 | Val MAE: 0.3010 | Test MAE: 0.2920 | Time: 22.6877
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [27] Train Loss: 0.2602 | Train MAE: 0.2599 | Val Loss: 0.7947 | Val MAE: 0.7944 | Test MAE: 0.7814 | Time: 24.6873
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [28] Train Loss: 0.2419 | Train MAE: 0.2416 | Val Loss: 0.2599 | Val MAE: 0.2596 | Test MAE: 0.2512 | Time: 23.9152
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [29] Train Loss: 0.2307 | Train MAE: 0.2304 | Val Loss: 0.3242 | Val MAE: 0.3239 | Test MAE: 0.3223 | Time: 22.9065
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [30] Train Loss: 0.2409 | Train MAE: 0.2406 | Val Loss: 0.2977 | Val MAE: 0.2974 | Test MAE: 0.2777 | Time: 22.8561
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [31] Train Loss: 0.2327 | Train MAE: 0.2324 | Val Loss: 0.5434 | Val MAE: 0.5431 | Test MAE: 0.5448 | Time: 23.3728
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [32] Train Loss: 0.2213 | Train MAE: 0.2210 | Val Loss: 0.3634 | Val MAE: 0.3632 | Test MAE: 0.3506 | Time: 23.3815
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [33] Train Loss: 0.2262 | Train MAE: 0.2259 | Val Loss: 0.4556 | Val MAE: 0.4553 | Test MAE: 0.4435 | Time: 22.4801
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [34] Train Loss: 0.2405 | Train MAE: 0.2402 | Val Loss: 0.2694 | Val MAE: 0.2691 | Test MAE: 0.2618 | Time: 23.1316
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [35] Train Loss: 0.2305 | Train MAE: 0.2302 | Val Loss: 0.2677 | Val MAE: 0.2674 | Test MAE: 0.2301 | Time: 22.8037
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [36] Train Loss: 0.2124 | Train MAE: 0.2120 | Val Loss: 0.4165 | Val MAE: 0.4162 | Test MAE: 0.4124 | Time: 23.0267
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [37] Train Loss: 0.2116 | Train MAE: 0.2113 | Val Loss: 0.3179 | Val MAE: 0.3176 | Test MAE: 0.3069 | Time: 26.6887
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [38] Train Loss: 0.2118 | Train MAE: 0.2115 | Val Loss: 0.2425 | Val MAE: 0.2422 | Test MAE: 0.2349 | Time: 23.0135
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [39] Train Loss: 0.2197 | Train MAE: 0.2194 | Val Loss: 0.2876 | Val MAE: 0.2873 | Test MAE: 0.2828 | Time: 23.8314
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [40] Train Loss: 0.2074 | Train MAE: 0.2071 | Val Loss: 0.3101 | Val MAE: 0.3098 | Test MAE: 0.3034 | Time: 24.0693
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [41] Train Loss: 0.1982 | Train MAE: 0.1979 | Val Loss: 0.2292 | Val MAE: 0.2289 | Test MAE: 0.2122 | Time: 23.4697
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [42] Train Loss: 0.2096 | Train MAE: 0.2093 | Val Loss: 0.5625 | Val MAE: 0.5622 | Test MAE: 0.5212 | Time: 22.5078
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [43] Train Loss: 0.1943 | Train MAE: 0.1940 | Val Loss: 0.2323 | Val MAE: 0.2320 | Test MAE: 0.2225 | Time: 23.1639
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [44] Train Loss: 0.2005 | Train MAE: 0.2002 | Val Loss: 0.2948 | Val MAE: 0.2945 | Test MAE: 0.2887 | Time: 22.9215
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [45] Train Loss: 0.1831 | Train MAE: 0.1828 | Val Loss: 0.3890 | Val MAE: 0.3887 | Test MAE: 0.3572 | Time: 22.5154
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [46] Train Loss: 0.1962 | Train MAE: 0.1959 | Val Loss: 0.2712 | Val MAE: 0.2709 | Test MAE: 0.2387 | Time: 23.7310
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [47] Train Loss: 0.1891 | Train MAE: 0.1888 | Val Loss: 0.3981 | Val MAE: 0.3978 | Test MAE: 0.3678 | Time: 22.9448
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [48] Train Loss: 0.2088 | Train MAE: 0.2085 | Val Loss: 0.2522 | Val MAE: 0.2519 | Test MAE: 0.2157 | Time: 23.1865
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [49] Train Loss: 0.1712 | Train MAE: 0.1709 | Val Loss: 0.2461 | Val MAE: 0.2458 | Test MAE: 0.2139 | Time: 22.9467
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [50] Train Loss: 0.1617 | Train MAE: 0.1614 | Val Loss: 0.2584 | Val MAE: 0.2581 | Test MAE: 0.2133 | Time: 22.7624
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [51] Train Loss: 0.1696 | Train MAE: 0.1692 | Val Loss: 0.2266 | Val MAE: 0.2263 | Test MAE: 0.1961 | Time: 22.9490
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [52] Train Loss: 0.1744 | Train MAE: 0.1741 | Val Loss: 0.3009 | Val MAE: 0.3006 | Test MAE: 0.2764 | Time: 23.9300
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [53] Train Loss: 0.1700 | Train MAE: 0.1697 | Val Loss: 0.5623 | Val MAE: 0.5620 | Test MAE: 0.5482 | Time: 23.0918
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [54] Train Loss: 0.1922 | Train MAE: 0.1919 | Val Loss: 0.3184 | Val MAE: 0.3181 | Test MAE: 0.2914 | Time: 23.1963
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [55] Train Loss: 0.1855 | Train MAE: 0.1852 | Val Loss: 0.6058 | Val MAE: 0.6055 | Test MAE: 0.5842 | Time: 23.2835
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [56] Train Loss: 0.1670 | Train MAE: 0.1667 | Val Loss: 0.2419 | Val MAE: 0.2416 | Test MAE: 0.2231 | Time: 22.9350
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [57] Train Loss: 0.1629 | Train MAE: 0.1626 | Val Loss: 0.2475 | Val MAE: 0.2472 | Test MAE: 0.2034 | Time: 22.1117
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [58] Train Loss: 0.1684 | Train MAE: 0.1681 | Val Loss: 0.5771 | Val MAE: 0.5768 | Test MAE: 0.5312 | Time: 24.7100
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [59] Train Loss: 0.1569 | Train MAE: 0.1565 | Val Loss: 0.2453 | Val MAE: 0.2450 | Test MAE: 0.2172 | Time: 22.9460
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [60] Train Loss: 0.1525 | Train MAE: 0.1522 | Val Loss: 0.3339 | Val MAE: 0.3336 | Test MAE: 0.3131 | Time: 22.8447
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [61] Train Loss: 0.1682 | Train MAE: 0.1679 | Val Loss: 0.2685 | Val MAE: 0.2682 | Test MAE: 0.2330 | Time: 23.2428
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [62] Train Loss: 0.1536 | Train MAE: 0.1533 | Val Loss: 0.2300 | Val MAE: 0.2297 | Test MAE: 0.2040 | Time: 23.5643
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [63] Train Loss: 0.1564 | Train MAE: 0.1560 | Val Loss: 0.4295 | Val MAE: 0.4292 | Test MAE: 0.4002 | Time: 23.6403
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [64] Train Loss: 0.1628 | Train MAE: 0.1625 | Val Loss: 0.2195 | Val MAE: 0.2192 | Test MAE: 0.1867 | Time: 24.1451
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [65] Train Loss: 0.1631 | Train MAE: 0.1628 | Val Loss: 0.3401 | Val MAE: 0.3398 | Test MAE: 0.2906 | Time: 23.5068
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [66] Train Loss: 0.1453 | Train MAE: 0.1450 | Val Loss: 0.2463 | Val MAE: 0.2460 | Test MAE: 0.2101 | Time: 22.6007
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [67] Train Loss: 0.1493 | Train MAE: 0.1490 | Val Loss: 0.2383 | Val MAE: 0.2380 | Test MAE: 0.1995 | Time: 25.1754
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [68] Train Loss: 0.1573 | Train MAE: 0.1570 | Val Loss: 0.3967 | Val MAE: 0.3964 | Test MAE: 0.3837 | Time: 22.7316
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [69] Train Loss: 0.1463 | Train MAE: 0.1460 | Val Loss: 0.4355 | Val MAE: 0.4352 | Test MAE: 0.4080 | Time: 25.1505
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [70] Train Loss: 0.1390 | Train MAE: 0.1387 | Val Loss: 0.2233 | Val MAE: 0.2230 | Test MAE: 0.2064 | Time: 24.2055
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [71] Train Loss: 0.1392 | Train MAE: 0.1389 | Val Loss: 0.3513 | Val MAE: 0.3510 | Test MAE: 0.3216 | Time: 26.6472
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [72] Train Loss: 0.1641 | Train MAE: 0.1638 | Val Loss: 0.2388 | Val MAE: 0.2385 | Test MAE: 0.2141 | Time: 23.4260
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [73] Train Loss: 0.1489 | Train MAE: 0.1485 | Val Loss: 0.3722 | Val MAE: 0.3719 | Test MAE: 0.3503 | Time: 26.8735
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [74] Train Loss: 0.1613 | Train MAE: 0.1610 | Val Loss: 0.2808 | Val MAE: 0.2805 | Test MAE: 0.2565 | Time: 23.0587
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [75] Train Loss: 0.1529 | Train MAE: 0.1526 | Val Loss: 0.4318 | Val MAE: 0.4315 | Test MAE: 0.4163 | Time: 23.2815
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [76] Train Loss: 0.1442 | Train MAE: 0.1439 | Val Loss: 0.2268 | Val MAE: 0.2265 | Test MAE: 0.2033 | Time: 23.5508
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [77] Train Loss: 0.1350 | Train MAE: 0.1347 | Val Loss: 0.2434 | Val MAE: 0.2431 | Test MAE: 0.2213 | Time: 23.4682
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [78] Train Loss: 0.1288 | Train MAE: 0.1285 | Val Loss: 0.3848 | Val MAE: 0.3845 | Test MAE: 0.3720 | Time: 23.2009
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [79] Train Loss: 0.1599 | Train MAE: 0.1596 | Val Loss: 0.2219 | Val MAE: 0.2216 | Test MAE: 0.1880 | Time: 23.0212
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [80] Train Loss: 0.1559 | Train MAE: 0.1556 | Val Loss: 0.2369 | Val MAE: 0.2366 | Test MAE: 0.2261 | Time: 23.4796
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [81] Train Loss: 0.1486 | Train MAE: 0.1483 | Val Loss: 0.2658 | Val MAE: 0.2655 | Test MAE: 0.2440 | Time: 25.8068
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [82] Train Loss: 0.1591 | Train MAE: 0.1588 | Val Loss: 0.3272 | Val MAE: 0.3269 | Test MAE: 0.3042 | Time: 22.8807
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [83] Train Loss: 0.1487 | Train MAE: 0.1484 | Val Loss: 0.2312 | Val MAE: 0.2309 | Test MAE: 0.2150 | Time: 23.3628
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [84] Train Loss: 0.1289 | Train MAE: 0.1286 | Val Loss: 0.2645 | Val MAE: 0.2642 | Test MAE: 0.2449 | Time: 23.5468
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [85] Train Loss: 0.1307 | Train MAE: 0.1304 | Val Loss: 0.2184 | Val MAE: 0.2181 | Test MAE: 0.1870 | Time: 23.2785
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [86] Train Loss: 0.1350 | Train MAE: 0.1347 | Val Loss: 0.2268 | Val MAE: 0.2265 | Test MAE: 0.1968 | Time: 23.3774
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [87] Train Loss: 0.1271 | Train MAE: 0.1268 | Val Loss: 0.2530 | Val MAE: 0.2527 | Test MAE: 0.2301 | Time: 23.0192
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [88] Train Loss: 0.1471 | Train MAE: 0.1468 | Val Loss: 0.3746 | Val MAE: 0.3743 | Test MAE: 0.3434 | Time: 23.0729
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [89] Train Loss: 0.1348 | Train MAE: 0.1345 | Val Loss: 0.5343 | Val MAE: 0.5340 | Test MAE: 0.5123 | Time: 23.0472
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [90] Train Loss: 0.1561 | Train MAE: 0.1558 | Val Loss: 0.2510 | Val MAE: 0.2507 | Test MAE: 0.2202 | Time: 22.5880
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [91] Train Loss: 0.1288 | Train MAE: 0.1284 | Val Loss: 0.3052 | Val MAE: 0.3049 | Test MAE: 0.2827 | Time: 23.5845
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [92] Train Loss: 0.1244 | Train MAE: 0.1241 | Val Loss: 0.2890 | Val MAE: 0.2887 | Test MAE: 0.2645 | Time: 23.1261
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [93] Train Loss: 0.1173 | Train MAE: 0.1170 | Val Loss: 0.2311 | Val MAE: 0.2308 | Test MAE: 0.2102 | Time: 23.0388
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [94] Train Loss: 0.1279 | Train MAE: 0.1275 | Val Loss: 0.2141 | Val MAE: 0.2138 | Test MAE: 0.1899 | Time: 23.1509
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [95] Train Loss: 0.1262 | Train MAE: 0.1259 | Val Loss: 0.2145 | Val MAE: 0.2142 | Test MAE: 0.1887 | Time: 22.9431
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [96] Train Loss: 0.1245 | Train MAE: 0.1242 | Val Loss: 0.2040 | Val MAE: 0.2037 | Test MAE: 0.1770 | Time: 22.9851
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [97] Train Loss: 0.1267 | Train MAE: 0.1264 | Val Loss: 0.2905 | Val MAE: 0.2902 | Test MAE: 0.2585 | Time: 23.0923
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [98] Train Loss: 0.1226 | Train MAE: 0.1223 | Val Loss: 0.3249 | Val MAE: 0.3246 | Test MAE: 0.2854 | Time: 23.3292
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [99] Train Loss: 0.1235 | Train MAE: 0.1232 | Val Loss: 0.2096 | Val MAE: 0.2093 | Test MAE: 0.1708 | Time: 22.9726
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [100] Train Loss: 0.1170 | Train MAE: 0.1167 | Val Loss: 0.2148 | Val MAE: 0.2145 | Test MAE: 0.1777 | Time: 26.4382
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [101] Train Loss: 0.1165 | Train MAE: 0.1162 | Val Loss: 0.2471 | Val MAE: 0.2468 | Test MAE: 0.2091 | Time: 22.4061
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [102] Train Loss: 0.1352 | Train MAE: 0.1349 | Val Loss: 0.2916 | Val MAE: 0.2913 | Test MAE: 0.2695 | Time: 22.7670
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [103] Train Loss: 0.1324 | Train MAE: 0.1321 | Val Loss: 0.2372 | Val MAE: 0.2369 | Test MAE: 0.2116 | Time: 23.8649
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [104] Train Loss: 0.1246 | Train MAE: 0.1243 | Val Loss: 0.2790 | Val MAE: 0.2787 | Test MAE: 0.2510 | Time: 23.3309
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [105] Train Loss: 0.1246 | Train MAE: 0.1243 | Val Loss: 0.2400 | Val MAE: 0.2398 | Test MAE: 0.2060 | Time: 24.1555
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [106] Train Loss: 0.1257 | Train MAE: 0.1254 | Val Loss: 0.2750 | Val MAE: 0.2747 | Test MAE: 0.2490 | Time: 23.4281
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [107] Train Loss: 0.1218 | Train MAE: 0.1215 | Val Loss: 0.3446 | Val MAE: 0.3443 | Test MAE: 0.3174 | Time: 23.6826
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [108] Train Loss: 0.1138 | Train MAE: 0.1135 | Val Loss: 0.2601 | Val MAE: 0.2598 | Test MAE: 0.2294 | Time: 23.1195
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [109] Train Loss: 0.1518 | Train MAE: 0.1515 | Val Loss: 0.2225 | Val MAE: 0.2222 | Test MAE: 0.1973 | Time: 22.5248
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [110] Train Loss: 0.1246 | Train MAE: 0.1243 | Val Loss: 0.3172 | Val MAE: 0.3169 | Test MAE: 0.2886 | Time: 23.4503
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [111] Train Loss: 0.1230 | Train MAE: 0.1227 | Val Loss: 0.2482 | Val MAE: 0.2479 | Test MAE: 0.2220 | Time: 24.1033
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [112] Train Loss: 0.1332 | Train MAE: 0.1329 | Val Loss: 0.2300 | Val MAE: 0.2297 | Test MAE: 0.2111 | Time: 22.4489
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [113] Train Loss: 0.1455 | Train MAE: 0.1452 | Val Loss: 0.3705 | Val MAE: 0.3702 | Test MAE: 0.3454 | Time: 25.8423
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [114] Train Loss: 0.1192 | Train MAE: 0.1189 | Val Loss: 0.2493 | Val MAE: 0.2490 | Test MAE: 0.2229 | Time: 22.7824
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [115] Train Loss: 0.1172 | Train MAE: 0.1169 | Val Loss: 0.2215 | Val MAE: 0.2212 | Test MAE: 0.1897 | Time: 23.7794
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [116] Train Loss: 0.1180 | Train MAE: 0.1177 | Val Loss: 0.2777 | Val MAE: 0.2774 | Test MAE: 0.2468 | Time: 26.1278
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [117] Train Loss: 0.1237 | Train MAE: 0.1234 | Val Loss: 0.2055 | Val MAE: 0.2052 | Test MAE: 0.1742 | Time: 23.4608
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [118] Train Loss: 0.1236 | Train MAE: 0.1233 | Val Loss: 0.2647 | Val MAE: 0.2644 | Test MAE: 0.2435 | Time: 23.6450
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [119] Train Loss: 0.1314 | Train MAE: 0.1311 | Val Loss: 0.2813 | Val MAE: 0.2810 | Test MAE: 0.2708 | Time: 23.2615
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [120] Train Loss: 0.1275 | Train MAE: 0.1272 | Val Loss: 0.2116 | Val MAE: 0.2113 | Test MAE: 0.1930 | Time: 22.7365
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [121] Train Loss: 0.1207 | Train MAE: 0.1204 | Val Loss: 0.2315 | Val MAE: 0.2312 | Test MAE: 0.2097 | Time: 23.3642
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [122] Train Loss: 0.1301 | Train MAE: 0.1298 | Val Loss: 0.2261 | Val MAE: 0.2258 | Test MAE: 0.2037 | Time: 23.3360
Epoch 00123: reducing learning rate of group 0 to 5.0000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [123] Train Loss: 0.0923 | Train MAE: 0.0920 | Val Loss: 0.1987 | Val MAE: 0.1984 | Test MAE: 0.1742 | Time: 26.6791
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [124] Train Loss: 0.0916 | Train MAE: 0.0913 | Val Loss: 0.1871 | Val MAE: 0.1868 | Test MAE: 0.1648 | Time: 25.1450
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [125] Train Loss: 0.0807 | Train MAE: 0.0804 | Val Loss: 0.1952 | Val MAE: 0.1949 | Test MAE: 0.1747 | Time: 23.6396
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [126] Train Loss: 0.0907 | Train MAE: 0.0904 | Val Loss: 0.3096 | Val MAE: 0.3094 | Test MAE: 0.2912 | Time: 24.4081
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [127] Train Loss: 0.0919 | Train MAE: 0.0916 | Val Loss: 0.1978 | Val MAE: 0.1975 | Test MAE: 0.1748 | Time: 23.2992
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [128] Train Loss: 0.0871 | Train MAE: 0.0868 | Val Loss: 0.1955 | Val MAE: 0.1952 | Test MAE: 0.1741 | Time: 23.1851
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [129] Train Loss: 0.0925 | Train MAE: 0.0922 | Val Loss: 0.2556 | Val MAE: 0.2553 | Test MAE: 0.2304 | Time: 23.1747
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [130] Train Loss: 0.0828 | Train MAE: 0.0825 | Val Loss: 0.1911 | Val MAE: 0.1908 | Test MAE: 0.1674 | Time: 22.9008
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [131] Train Loss: 0.0836 | Train MAE: 0.0833 | Val Loss: 0.1951 | Val MAE: 0.1948 | Test MAE: 0.1741 | Time: 22.6690
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [132] Train Loss: 0.0957 | Train MAE: 0.0954 | Val Loss: 0.2780 | Val MAE: 0.2777 | Test MAE: 0.2573 | Time: 23.2708
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [133] Train Loss: 0.1046 | Train MAE: 0.1042 | Val Loss: 0.1950 | Val MAE: 0.1947 | Test MAE: 0.1664 | Time: 23.9265
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [134] Train Loss: 0.0869 | Train MAE: 0.0866 | Val Loss: 0.2081 | Val MAE: 0.2078 | Test MAE: 0.1802 | Time: 24.0666
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [135] Train Loss: 0.0997 | Train MAE: 0.0994 | Val Loss: 0.2585 | Val MAE: 0.2582 | Test MAE: 0.2267 | Time: 23.4224
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [136] Train Loss: 0.0825 | Train MAE: 0.0822 | Val Loss: 0.2399 | Val MAE: 0.2396 | Test MAE: 0.2125 | Time: 23.2386
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [137] Train Loss: 0.0918 | Train MAE: 0.0915 | Val Loss: 0.2348 | Val MAE: 0.2345 | Test MAE: 0.2077 | Time: 22.9205
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [138] Train Loss: 0.0850 | Train MAE: 0.0847 | Val Loss: 0.1949 | Val MAE: 0.1946 | Test MAE: 0.1658 | Time: 23.4832
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [139] Train Loss: 0.0863 | Train MAE: 0.0860 | Val Loss: 0.1991 | Val MAE: 0.1988 | Test MAE: 0.1716 | Time: 23.0627
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [140] Train Loss: 0.0717 | Train MAE: 0.0714 | Val Loss: 0.2005 | Val MAE: 0.2002 | Test MAE: 0.1797 | Time: 22.7676
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [141] Train Loss: 0.0726 | Train MAE: 0.0723 | Val Loss: 0.2071 | Val MAE: 0.2068 | Test MAE: 0.1790 | Time: 24.8792
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [142] Train Loss: 0.0854 | Train MAE: 0.0851 | Val Loss: 0.1967 | Val MAE: 0.1964 | Test MAE: 0.1688 | Time: 23.0689
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [143] Train Loss: 0.0689 | Train MAE: 0.0686 | Val Loss: 0.2176 | Val MAE: 0.2173 | Test MAE: 0.1906 | Time: 23.0701
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [144] Train Loss: 0.0858 | Train MAE: 0.0854 | Val Loss: 0.1972 | Val MAE: 0.1970 | Test MAE: 0.1690 | Time: 23.1285
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [145] Train Loss: 0.0803 | Train MAE: 0.0800 | Val Loss: 0.2012 | Val MAE: 0.2009 | Test MAE: 0.1721 | Time: 23.7765
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [146] Train Loss: 0.0716 | Train MAE: 0.0713 | Val Loss: 0.1990 | Val MAE: 0.1987 | Test MAE: 0.1741 | Time: 23.2566
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [147] Train Loss: 0.0803 | Train MAE: 0.0800 | Val Loss: 0.2031 | Val MAE: 0.2028 | Test MAE: 0.1756 | Time: 23.5472
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [148] Train Loss: 0.0822 | Train MAE: 0.0819 | Val Loss: 0.2315 | Val MAE: 0.2312 | Test MAE: 0.2104 | Time: 23.3598
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [149] Train Loss: 0.0740 | Train MAE: 0.0737 | Val Loss: 0.1941 | Val MAE: 0.1938 | Test MAE: 0.1655 | Time: 25.5952
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [150] Train Loss: 0.0774 | Train MAE: 0.0771 | Val Loss: 0.2493 | Val MAE: 0.2490 | Test MAE: 0.2197 | Time: 23.1840
Epoch 00151: reducing learning rate of group 0 to 2.5000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [151] Train Loss: 0.0672 | Train MAE: 0.0669 | Val Loss: 0.2108 | Val MAE: 0.2106 | Test MAE: 0.1833 | Time: 22.7507
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [152] Train Loss: 0.0622 | Train MAE: 0.0618 | Val Loss: 0.1923 | Val MAE: 0.1920 | Test MAE: 0.1628 | Time: 23.6313
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [153] Train Loss: 0.0645 | Train MAE: 0.0642 | Val Loss: 0.1920 | Val MAE: 0.1917 | Test MAE: 0.1637 | Time: 24.0637
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [154] Train Loss: 0.0673 | Train MAE: 0.0670 | Val Loss: 0.1916 | Val MAE: 0.1913 | Test MAE: 0.1660 | Time: 25.7545
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [155] Train Loss: 0.0679 | Train MAE: 0.0676 | Val Loss: 0.1952 | Val MAE: 0.1949 | Test MAE: 0.1679 | Time: 25.4377
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [156] Train Loss: 0.0600 | Train MAE: 0.0597 | Val Loss: 0.1943 | Val MAE: 0.1940 | Test MAE: 0.1658 | Time: 22.8894
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [157] Train Loss: 0.0666 | Train MAE: 0.0663 | Val Loss: 0.1866 | Val MAE: 0.1863 | Test MAE: 0.1589 | Time: 23.1241
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [158] Train Loss: 0.0596 | Train MAE: 0.0593 | Val Loss: 0.1883 | Val MAE: 0.1880 | Test MAE: 0.1587 | Time: 23.3301
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [159] Train Loss: 0.0571 | Train MAE: 0.0567 | Val Loss: 0.1916 | Val MAE: 0.1913 | Test MAE: 0.1642 | Time: 23.3835
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [160] Train Loss: 0.0542 | Train MAE: 0.0539 | Val Loss: 0.1899 | Val MAE: 0.1896 | Test MAE: 0.1620 | Time: 23.2308
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [161] Train Loss: 0.0589 | Train MAE: 0.0586 | Val Loss: 0.2026 | Val MAE: 0.2023 | Test MAE: 0.1747 | Time: 23.5231
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [162] Train Loss: 0.0578 | Train MAE: 0.0575 | Val Loss: 0.2076 | Val MAE: 0.2073 | Test MAE: 0.1795 | Time: 22.7993
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [163] Train Loss: 0.0659 | Train MAE: 0.0656 | Val Loss: 0.1967 | Val MAE: 0.1964 | Test MAE: 0.1680 | Time: 24.9665
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [164] Train Loss: 0.0600 | Train MAE: 0.0597 | Val Loss: 0.1947 | Val MAE: 0.1944 | Test MAE: 0.1662 | Time: 23.2630
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [165] Train Loss: 0.0582 | Train MAE: 0.0579 | Val Loss: 0.1896 | Val MAE: 0.1894 | Test MAE: 0.1603 | Time: 23.1916
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [166] Train Loss: 0.0586 | Train MAE: 0.0583 | Val Loss: 0.1887 | Val MAE: 0.1884 | Test MAE: 0.1582 | Time: 23.4003
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [167] Train Loss: 0.0580 | Train MAE: 0.0577 | Val Loss: 0.1918 | Val MAE: 0.1916 | Test MAE: 0.1595 | Time: 23.3455
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [168] Train Loss: 0.0534 | Train MAE: 0.0531 | Val Loss: 0.1901 | Val MAE: 0.1898 | Test MAE: 0.1632 | Time: 23.5412
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [169] Train Loss: 0.0609 | Train MAE: 0.0606 | Val Loss: 0.1963 | Val MAE: 0.1960 | Test MAE: 0.1658 | Time: 23.8329
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [170] Train Loss: 0.0515 | Train MAE: 0.0512 | Val Loss: 0.1939 | Val MAE: 0.1936 | Test MAE: 0.1645 | Time: 24.8686
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [171] Train Loss: 0.0539 | Train MAE: 0.0536 | Val Loss: 0.1876 | Val MAE: 0.1873 | Test MAE: 0.1587 | Time: 22.7207
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [172] Train Loss: 0.0598 | Train MAE: 0.0595 | Val Loss: 0.1884 | Val MAE: 0.1881 | Test MAE: 0.1601 | Time: 23.4459
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [173] Train Loss: 0.0614 | Train MAE: 0.0611 | Val Loss: 0.1917 | Val MAE: 0.1914 | Test MAE: 0.1629 | Time: 22.6175
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [174] Train Loss: 0.0590 | Train MAE: 0.0587 | Val Loss: 0.1918 | Val MAE: 0.1915 | Test MAE: 0.1607 | Time: 23.1468
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [175] Train Loss: 0.0586 | Train MAE: 0.0582 | Val Loss: 0.1982 | Val MAE: 0.1979 | Test MAE: 0.1678 | Time: 23.0814
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [176] Train Loss: 0.0536 | Train MAE: 0.0533 | Val Loss: 0.1976 | Val MAE: 0.1973 | Test MAE: 0.1659 | Time: 22.7567
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [177] Train Loss: 0.0516 | Train MAE: 0.0513 | Val Loss: 0.1993 | Val MAE: 0.1990 | Test MAE: 0.1704 | Time: 23.1755
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [178] Train Loss: 0.0545 | Train MAE: 0.0542 | Val Loss: 0.1943 | Val MAE: 0.1940 | Test MAE: 0.1670 | Time: 22.8478
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [179] Train Loss: 0.0538 | Train MAE: 0.0535 | Val Loss: 0.1907 | Val MAE: 0.1904 | Test MAE: 0.1596 | Time: 23.5703
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [180] Train Loss: 0.0513 | Train MAE: 0.0510 | Val Loss: 0.2155 | Val MAE: 0.2152 | Test MAE: 0.1884 | Time: 26.9426
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [181] Train Loss: 0.0559 | Train MAE: 0.0556 | Val Loss: 0.1888 | Val MAE: 0.1885 | Test MAE: 0.1595 | Time: 23.6967
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [182] Train Loss: 0.0573 | Train MAE: 0.0570 | Val Loss: 0.1906 | Val MAE: 0.1903 | Test MAE: 0.1596 | Time: 22.6442
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [183] Train Loss: 0.0487 | Train MAE: 0.0484 | Val Loss: 0.1980 | Val MAE: 0.1977 | Test MAE: 0.1663 | Time: 23.6917
Epoch 00184: reducing learning rate of group 0 to 1.2500e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [184] Train Loss: 0.0482 | Train MAE: 0.0478 | Val Loss: 0.1892 | Val MAE: 0.1889 | Test MAE: 0.1574 | Time: 23.7329
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [185] Train Loss: 0.0482 | Train MAE: 0.0479 | Val Loss: 0.1941 | Val MAE: 0.1938 | Test MAE: 0.1625 | Time: 23.5173
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [186] Train Loss: 0.0520 | Train MAE: 0.0516 | Val Loss: 0.1887 | Val MAE: 0.1884 | Test MAE: 0.1557 | Time: 22.7750
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [187] Train Loss: 0.0517 | Train MAE: 0.0514 | Val Loss: 0.1902 | Val MAE: 0.1899 | Test MAE: 0.1594 | Time: 23.7322
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [188] Train Loss: 0.0501 | Train MAE: 0.0498 | Val Loss: 0.1924 | Val MAE: 0.1921 | Test MAE: 0.1602 | Time: 23.1221
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [189] Train Loss: 0.0512 | Train MAE: 0.0509 | Val Loss: 0.1909 | Val MAE: 0.1906 | Test MAE: 0.1597 | Time: 23.1914
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [190] Train Loss: 0.0482 | Train MAE: 0.0479 | Val Loss: 0.1972 | Val MAE: 0.1969 | Test MAE: 0.1654 | Time: 23.2610
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [191] Train Loss: 0.0459 | Train MAE: 0.0456 | Val Loss: 0.1899 | Val MAE: 0.1896 | Test MAE: 0.1578 | Time: 23.7380
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [192] Train Loss: 0.0539 | Train MAE: 0.0536 | Val Loss: 0.2050 | Val MAE: 0.2047 | Test MAE: 0.1731 | Time: 23.2541
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [193] Train Loss: 0.0478 | Train MAE: 0.0475 | Val Loss: 0.1994 | Val MAE: 0.1991 | Test MAE: 0.1703 | Time: 23.8695
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [194] Train Loss: 0.0457 | Train MAE: 0.0454 | Val Loss: 0.1892 | Val MAE: 0.1889 | Test MAE: 0.1617 | Time: 23.5038
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [195] Train Loss: 0.0460 | Train MAE: 0.0457 | Val Loss: 0.1971 | Val MAE: 0.1968 | Test MAE: 0.1657 | Time: 26.1105
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [196] Train Loss: 0.0428 | Train MAE: 0.0425 | Val Loss: 0.1888 | Val MAE: 0.1885 | Test MAE: 0.1572 | Time: 24.1557
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [197] Train Loss: 0.0443 | Train MAE: 0.0440 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1575 | Time: 24.2822
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [198] Train Loss: 0.0469 | Train MAE: 0.0465 | Val Loss: 0.1896 | Val MAE: 0.1893 | Test MAE: 0.1584 | Time: 23.3174
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [199] Train Loss: 0.0446 | Train MAE: 0.0443 | Val Loss: 0.1970 | Val MAE: 0.1967 | Test MAE: 0.1677 | Time: 23.6685
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [200] Train Loss: 0.0409 | Train MAE: 0.0406 | Val Loss: 0.1900 | Val MAE: 0.1897 | Test MAE: 0.1573 | Time: 23.5341
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [201] Train Loss: 0.0480 | Train MAE: 0.0477 | Val Loss: 0.1904 | Val MAE: 0.1901 | Test MAE: 0.1583 | Time: 23.2862
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [202] Train Loss: 0.0477 | Train MAE: 0.0474 | Val Loss: 0.1947 | Val MAE: 0.1944 | Test MAE: 0.1617 | Time: 24.9713
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [203] Train Loss: 0.0461 | Train MAE: 0.0458 | Val Loss: 0.1926 | Val MAE: 0.1923 | Test MAE: 0.1607 | Time: 22.9284
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [204] Train Loss: 0.0470 | Train MAE: 0.0467 | Val Loss: 0.1872 | Val MAE: 0.1869 | Test MAE: 0.1580 | Time: 23.3231
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [205] Train Loss: 0.0443 | Train MAE: 0.0440 | Val Loss: 0.1902 | Val MAE: 0.1899 | Test MAE: 0.1584 | Time: 23.2359
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [206] Train Loss: 0.0458 | Train MAE: 0.0455 | Val Loss: 0.1938 | Val MAE: 0.1935 | Test MAE: 0.1615 | Time: 23.2580
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [207] Train Loss: 0.0477 | Train MAE: 0.0474 | Val Loss: 0.2183 | Val MAE: 0.2180 | Test MAE: 0.1859 | Time: 23.1103
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [208] Train Loss: 0.0448 | Train MAE: 0.0445 | Val Loss: 0.1909 | Val MAE: 0.1906 | Test MAE: 0.1608 | Time: 23.2284
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [209] Train Loss: 0.0416 | Train MAE: 0.0413 | Val Loss: 0.1896 | Val MAE: 0.1893 | Test MAE: 0.1593 | Time: 23.2422
Epoch 00210: reducing learning rate of group 0 to 6.2500e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [210] Train Loss: 0.0416 | Train MAE: 0.0413 | Val Loss: 0.1899 | Val MAE: 0.1896 | Test MAE: 0.1593 | Time: 23.1502
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [211] Train Loss: 0.0402 | Train MAE: 0.0399 | Val Loss: 0.1883 | Val MAE: 0.1880 | Test MAE: 0.1564 | Time: 23.5626
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [212] Train Loss: 0.0398 | Train MAE: 0.0395 | Val Loss: 0.1889 | Val MAE: 0.1886 | Test MAE: 0.1558 | Time: 23.4324
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [213] Train Loss: 0.0392 | Train MAE: 0.0389 | Val Loss: 0.1885 | Val MAE: 0.1882 | Test MAE: 0.1553 | Time: 23.6302
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [214] Train Loss: 0.0390 | Train MAE: 0.0387 | Val Loss: 0.1871 | Val MAE: 0.1868 | Test MAE: 0.1556 | Time: 26.0989
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [215] Train Loss: 0.0390 | Train MAE: 0.0387 | Val Loss: 0.1865 | Val MAE: 0.1862 | Test MAE: 0.1559 | Time: 23.3860
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [216] Train Loss: 0.0398 | Train MAE: 0.0395 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1567 | Time: 23.2968
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [217] Train Loss: 0.0404 | Train MAE: 0.0401 | Val Loss: 0.1881 | Val MAE: 0.1878 | Test MAE: 0.1577 | Time: 23.1558
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [218] Train Loss: 0.0413 | Train MAE: 0.0410 | Val Loss: 0.1880 | Val MAE: 0.1877 | Test MAE: 0.1566 | Time: 23.1858
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [219] Train Loss: 0.0387 | Train MAE: 0.0384 | Val Loss: 0.1874 | Val MAE: 0.1871 | Test MAE: 0.1571 | Time: 23.4986
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [220] Train Loss: 0.0359 | Train MAE: 0.0356 | Val Loss: 0.1866 | Val MAE: 0.1863 | Test MAE: 0.1567 | Time: 26.0447
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [221] Train Loss: 0.0421 | Train MAE: 0.0418 | Val Loss: 0.1878 | Val MAE: 0.1875 | Test MAE: 0.1565 | Time: 24.8742
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [222] Train Loss: 0.0371 | Train MAE: 0.0368 | Val Loss: 0.1882 | Val MAE: 0.1879 | Test MAE: 0.1558 | Time: 23.7849
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [223] Train Loss: 0.0401 | Train MAE: 0.0398 | Val Loss: 0.1920 | Val MAE: 0.1917 | Test MAE: 0.1621 | Time: 24.2116
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [224] Train Loss: 0.0382 | Train MAE: 0.0379 | Val Loss: 0.1883 | Val MAE: 0.1880 | Test MAE: 0.1576 | Time: 24.0240
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [225] Train Loss: 0.0400 | Train MAE: 0.0397 | Val Loss: 0.1915 | Val MAE: 0.1912 | Test MAE: 0.1610 | Time: 22.6869
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [226] Train Loss: 0.0372 | Train MAE: 0.0369 | Val Loss: 0.1881 | Val MAE: 0.1878 | Test MAE: 0.1573 | Time: 22.9208
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [227] Train Loss: 0.0394 | Train MAE: 0.0391 | Val Loss: 0.1882 | Val MAE: 0.1879 | Test MAE: 0.1574 | Time: 22.7818
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [228] Train Loss: 0.0379 | Train MAE: 0.0376 | Val Loss: 0.1868 | Val MAE: 0.1865 | Test MAE: 0.1558 | Time: 23.2393
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [229] Train Loss: 0.0398 | Train MAE: 0.0395 | Val Loss: 0.1895 | Val MAE: 0.1892 | Test MAE: 0.1574 | Time: 23.7714
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [230] Train Loss: 0.0354 | Train MAE: 0.0351 | Val Loss: 0.1883 | Val MAE: 0.1880 | Test MAE: 0.1584 | Time: 24.1492
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [231] Train Loss: 0.0369 | Train MAE: 0.0366 | Val Loss: 0.1891 | Val MAE: 0.1888 | Test MAE: 0.1592 | Time: 23.0909
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [232] Train Loss: 0.0460 | Train MAE: 0.0457 | Val Loss: 0.1902 | Val MAE: 0.1900 | Test MAE: 0.1611 | Time: 23.0785
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [233] Train Loss: 0.0338 | Train MAE: 0.0335 | Val Loss: 0.1862 | Val MAE: 0.1859 | Test MAE: 0.1555 | Time: 23.1204
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [234] Train Loss: 0.0379 | Train MAE: 0.0376 | Val Loss: 0.1871 | Val MAE: 0.1868 | Test MAE: 0.1558 | Time: 23.5308
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [235] Train Loss: 0.0394 | Train MAE: 0.0391 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1565 | Time: 22.8844
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [236] Train Loss: 0.0407 | Train MAE: 0.0404 | Val Loss: 0.1889 | Val MAE: 0.1886 | Test MAE: 0.1582 | Time: 24.4624
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [237] Train Loss: 0.0364 | Train MAE: 0.0361 | Val Loss: 0.1881 | Val MAE: 0.1878 | Test MAE: 0.1585 | Time: 22.7543
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [238] Train Loss: 0.0375 | Train MAE: 0.0372 | Val Loss: 0.1864 | Val MAE: 0.1861 | Test MAE: 0.1561 | Time: 23.3080
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [239] Train Loss: 0.0342 | Train MAE: 0.0339 | Val Loss: 0.1867 | Val MAE: 0.1864 | Test MAE: 0.1565 | Time: 23.6931
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [240] Train Loss: 0.0374 | Train MAE: 0.0371 | Val Loss: 0.1914 | Val MAE: 0.1911 | Test MAE: 0.1615 | Time: 23.1125
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [241] Train Loss: 0.0399 | Train MAE: 0.0396 | Val Loss: 0.1887 | Val MAE: 0.1884 | Test MAE: 0.1607 | Time: 24.7142
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [242] Train Loss: 0.0375 | Train MAE: 0.0372 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1590 | Time: 23.1802
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [243] Train Loss: 0.0363 | Train MAE: 0.0360 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1576 | Time: 24.0070
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [244] Train Loss: 0.0347 | Train MAE: 0.0344 | Val Loss: 0.1896 | Val MAE: 0.1893 | Test MAE: 0.1591 | Time: 23.6328
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [245] Train Loss: 0.0364 | Train MAE: 0.0361 | Val Loss: 0.1893 | Val MAE: 0.1890 | Test MAE: 0.1591 | Time: 26.1974
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [246] Train Loss: 0.0327 | Train MAE: 0.0324 | Val Loss: 0.1884 | Val MAE: 0.1881 | Test MAE: 0.1566 | Time: 23.0267
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [247] Train Loss: 0.0338 | Train MAE: 0.0335 | Val Loss: 0.1884 | Val MAE: 0.1881 | Test MAE: 0.1580 | Time: 22.7259
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [248] Train Loss: 0.0378 | Train MAE: 0.0375 | Val Loss: 0.1876 | Val MAE: 0.1873 | Test MAE: 0.1583 | Time: 23.7766
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [249] Train Loss: 0.0363 | Train MAE: 0.0360 | Val Loss: 0.1862 | Val MAE: 0.1859 | Test MAE: 0.1581 | Time: 23.2359
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [250] Train Loss: 0.0367 | Train MAE: 0.0364 | Val Loss: 0.1870 | Val MAE: 0.1867 | Test MAE: 0.1589 | Time: 24.5203
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [251] Train Loss: 0.0361 | Train MAE: 0.0358 | Val Loss: 0.1879 | Val MAE: 0.1876 | Test MAE: 0.1585 | Time: 24.1944
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [252] Train Loss: 0.0378 | Train MAE: 0.0375 | Val Loss: 0.1863 | Val MAE: 0.1860 | Test MAE: 0.1578 | Time: 24.2030
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [253] Train Loss: 0.0334 | Train MAE: 0.0331 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1588 | Time: 23.3308
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [254] Train Loss: 0.0350 | Train MAE: 0.0347 | Val Loss: 0.1937 | Val MAE: 0.1934 | Test MAE: 0.1656 | Time: 24.4551
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [255] Train Loss: 0.0365 | Train MAE: 0.0362 | Val Loss: 0.1933 | Val MAE: 0.1930 | Test MAE: 0.1635 | Time: 22.9106
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [256] Train Loss: 0.0391 | Train MAE: 0.0388 | Val Loss: 0.1946 | Val MAE: 0.1943 | Test MAE: 0.1663 | Time: 24.0041
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [257] Train Loss: 0.0357 | Train MAE: 0.0353 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1584 | Time: 23.1287
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [258] Train Loss: 0.0350 | Train MAE: 0.0347 | Val Loss: 0.1930 | Val MAE: 0.1927 | Test MAE: 0.1655 | Time: 23.5387
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [259] Train Loss: 0.0319 | Train MAE: 0.0316 | Val Loss: 0.1864 | Val MAE: 0.1861 | Test MAE: 0.1591 | Time: 22.9066
Epoch 00260: reducing learning rate of group 0 to 3.1250e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [260] Train Loss: 0.0367 | Train MAE: 0.0364 | Val Loss: 0.1870 | Val MAE: 0.1867 | Test MAE: 0.1569 | Time: 22.7414
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [261] Train Loss: 0.0400 | Train MAE: 0.0397 | Val Loss: 0.1865 | Val MAE: 0.1862 | Test MAE: 0.1587 | Time: 23.6247
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [262] Train Loss: 0.0298 | Train MAE: 0.0295 | Val Loss: 0.1880 | Val MAE: 0.1877 | Test MAE: 0.1588 | Time: 22.6285
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [263] Train Loss: 0.0361 | Train MAE: 0.0358 | Val Loss: 0.1867 | Val MAE: 0.1864 | Test MAE: 0.1567 | Time: 26.1724
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [264] Train Loss: 0.0305 | Train MAE: 0.0302 | Val Loss: 0.1854 | Val MAE: 0.1851 | Test MAE: 0.1567 | Time: 22.7957
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [265] Train Loss: 0.0345 | Train MAE: 0.0342 | Val Loss: 0.1876 | Val MAE: 0.1873 | Test MAE: 0.1570 | Time: 22.9325
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [266] Train Loss: 0.0305 | Train MAE: 0.0302 | Val Loss: 0.1872 | Val MAE: 0.1869 | Test MAE: 0.1581 | Time: 23.4258
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [267] Train Loss: 0.0342 | Train MAE: 0.0339 | Val Loss: 0.1871 | Val MAE: 0.1868 | Test MAE: 0.1576 | Time: 23.3532
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [268] Train Loss: 0.0342 | Train MAE: 0.0339 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1573 | Time: 23.9363
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [269] Train Loss: 0.0325 | Train MAE: 0.0322 | Val Loss: 0.1869 | Val MAE: 0.1867 | Test MAE: 0.1568 | Time: 23.1084
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [270] Train Loss: 0.0309 | Train MAE: 0.0306 | Val Loss: 0.1857 | Val MAE: 0.1854 | Test MAE: 0.1564 | Time: 21.8883
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [271] Train Loss: 0.0342 | Train MAE: 0.0339 | Val Loss: 0.1859 | Val MAE: 0.1856 | Test MAE: 0.1563 | Time: 23.1411
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [272] Train Loss: 0.0349 | Train MAE: 0.0346 | Val Loss: 0.1878 | Val MAE: 0.1876 | Test MAE: 0.1583 | Time: 22.8370
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [273] Train Loss: 0.0358 | Train MAE: 0.0355 | Val Loss: 0.1870 | Val MAE: 0.1867 | Test MAE: 0.1576 | Time: 23.3277
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [274] Train Loss: 0.0316 | Train MAE: 0.0313 | Val Loss: 0.1863 | Val MAE: 0.1860 | Test MAE: 0.1570 | Time: 23.7325
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [275] Train Loss: 0.0350 | Train MAE: 0.0347 | Val Loss: 0.1867 | Val MAE: 0.1864 | Test MAE: 0.1569 | Time: 22.9994
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [276] Train Loss: 0.0339 | Train MAE: 0.0336 | Val Loss: 0.1880 | Val MAE: 0.1877 | Test MAE: 0.1579 | Time: 22.5555
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [277] Train Loss: 0.0347 | Train MAE: 0.0344 | Val Loss: 0.1857 | Val MAE: 0.1855 | Test MAE: 0.1565 | Time: 23.2771
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [278] Train Loss: 0.0362 | Train MAE: 0.0359 | Val Loss: 0.1863 | Val MAE: 0.1860 | Test MAE: 0.1565 | Time: 23.2090
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [279] Train Loss: 0.0317 | Train MAE: 0.0314 | Val Loss: 0.1878 | Val MAE: 0.1875 | Test MAE: 0.1573 | Time: 22.3706
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [280] Train Loss: 0.0314 | Train MAE: 0.0311 | Val Loss: 0.1882 | Val MAE: 0.1879 | Test MAE: 0.1581 | Time: 22.3664
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [281] Train Loss: 0.0331 | Train MAE: 0.0328 | Val Loss: 0.1861 | Val MAE: 0.1858 | Test MAE: 0.1567 | Time: 23.5925
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [282] Train Loss: 0.0335 | Train MAE: 0.0332 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1579 | Time: 22.3100
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [283] Train Loss: 0.0323 | Train MAE: 0.0319 | Val Loss: 0.1858 | Val MAE: 0.1855 | Test MAE: 0.1573 | Time: 23.2244
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [284] Train Loss: 0.0329 | Train MAE: 0.0326 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1586 | Time: 23.1690
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [285] Train Loss: 0.0329 | Train MAE: 0.0326 | Val Loss: 0.1856 | Val MAE: 0.1853 | Test MAE: 0.1568 | Time: 23.5036
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [286] Train Loss: 0.0317 | Train MAE: 0.0313 | Val Loss: 0.1853 | Val MAE: 0.1850 | Test MAE: 0.1572 | Time: 23.3467
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [287] Train Loss: 0.0340 | Train MAE: 0.0337 | Val Loss: 0.1878 | Val MAE: 0.1875 | Test MAE: 0.1591 | Time: 23.7234
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [288] Train Loss: 0.0318 | Train MAE: 0.0314 | Val Loss: 0.1860 | Val MAE: 0.1857 | Test MAE: 0.1563 | Time: 23.0786
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [289] Train Loss: 0.0321 | Train MAE: 0.0318 | Val Loss: 0.1863 | Val MAE: 0.1860 | Test MAE: 0.1563 | Time: 22.9949
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [290] Train Loss: 0.0346 | Train MAE: 0.0343 | Val Loss: 0.1859 | Val MAE: 0.1856 | Test MAE: 0.1564 | Time: 23.1897
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [291] Train Loss: 0.0305 | Train MAE: 0.0302 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1582 | Time: 22.9905
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [292] Train Loss: 0.0326 | Train MAE: 0.0323 | Val Loss: 0.1864 | Val MAE: 0.1861 | Test MAE: 0.1572 | Time: 22.3953
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [293] Train Loss: 0.0307 | Train MAE: 0.0304 | Val Loss: 0.1863 | Val MAE: 0.1860 | Test MAE: 0.1573 | Time: 23.1852
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [294] Train Loss: 0.0300 | Train MAE: 0.0297 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1580 | Time: 22.4431
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [295] Train Loss: 0.0311 | Train MAE: 0.0308 | Val Loss: 0.1886 | Val MAE: 0.1883 | Test MAE: 0.1585 | Time: 23.3110
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [296] Train Loss: 0.0320 | Train MAE: 0.0317 | Val Loss: 0.1859 | Val MAE: 0.1856 | Test MAE: 0.1568 | Time: 23.6730
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [297] Train Loss: 0.0356 | Train MAE: 0.0353 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1585 | Time: 22.3369
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [298] Train Loss: 0.0351 | Train MAE: 0.0348 | Val Loss: 0.1860 | Val MAE: 0.1857 | Test MAE: 0.1572 | Time: 23.0341
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [299] Train Loss: 0.0311 | Train MAE: 0.0308 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1580 | Time: 24.2583
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [300] Train Loss: 0.0328 | Train MAE: 0.0325 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1593 | Time: 23.2673
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [301] Train Loss: 0.0338 | Train MAE: 0.0335 | Val Loss: 0.1874 | Val MAE: 0.1871 | Test MAE: 0.1583 | Time: 25.4116
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [302] Train Loss: 0.0304 | Train MAE: 0.0301 | Val Loss: 0.1872 | Val MAE: 0.1869 | Test MAE: 0.1580 | Time: 25.2107
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [303] Train Loss: 0.0310 | Train MAE: 0.0307 | Val Loss: 0.1866 | Val MAE: 0.1863 | Test MAE: 0.1569 | Time: 23.5011
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [304] Train Loss: 0.0307 | Train MAE: 0.0304 | Val Loss: 0.1864 | Val MAE: 0.1861 | Test MAE: 0.1568 | Time: 23.1199
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [305] Train Loss: 0.0340 | Train MAE: 0.0337 | Val Loss: 0.1887 | Val MAE: 0.1884 | Test MAE: 0.1593 | Time: 22.9416
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [306] Train Loss: 0.0307 | Train MAE: 0.0304 | Val Loss: 0.1865 | Val MAE: 0.1862 | Test MAE: 0.1575 | Time: 26.7721
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [307] Train Loss: 0.0343 | Train MAE: 0.0340 | Val Loss: 0.1872 | Val MAE: 0.1869 | Test MAE: 0.1580 | Time: 22.8293
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [308] Train Loss: 0.0343 | Train MAE: 0.0340 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1590 | Time: 26.5138
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [309] Train Loss: 0.0323 | Train MAE: 0.0320 | Val Loss: 0.1872 | Val MAE: 0.1869 | Test MAE: 0.1580 | Time: 22.7478
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [310] Train Loss: 0.0327 | Train MAE: 0.0324 | Val Loss: 0.1867 | Val MAE: 0.1864 | Test MAE: 0.1569 | Time: 25.9232
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [311] Train Loss: 0.0338 | Train MAE: 0.0335 | Val Loss: 0.1862 | Val MAE: 0.1859 | Test MAE: 0.1580 | Time: 22.1816
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [312] Train Loss: 0.0316 | Train MAE: 0.0313 | Val Loss: 0.1870 | Val MAE: 0.1867 | Test MAE: 0.1598 | Time: 22.7129
Epoch 00313: reducing learning rate of group 0 to 1.5625e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [313] Train Loss: 0.0319 | Train MAE: 0.0316 | Val Loss: 0.1860 | Val MAE: 0.1857 | Test MAE: 0.1582 | Time: 22.5692
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [314] Train Loss: 0.0312 | Train MAE: 0.0309 | Val Loss: 0.1861 | Val MAE: 0.1858 | Test MAE: 0.1573 | Time: 23.4051
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [315] Train Loss: 0.0296 | Train MAE: 0.0293 | Val Loss: 0.1862 | Val MAE: 0.1859 | Test MAE: 0.1571 | Time: 22.7190
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [316] Train Loss: 0.0305 | Train MAE: 0.0302 | Val Loss: 0.1871 | Val MAE: 0.1868 | Test MAE: 0.1565 | Time: 23.1516
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [317] Train Loss: 0.0284 | Train MAE: 0.0281 | Val Loss: 0.1876 | Val MAE: 0.1873 | Test MAE: 0.1576 | Time: 23.9599
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [318] Train Loss: 0.0287 | Train MAE: 0.0284 | Val Loss: 0.1863 | Val MAE: 0.1860 | Test MAE: 0.1578 | Time: 26.2911
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [319] Train Loss: 0.0341 | Train MAE: 0.0338 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1591 | Time: 23.4977
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [320] Train Loss: 0.0311 | Train MAE: 0.0308 | Val Loss: 0.1860 | Val MAE: 0.1857 | Test MAE: 0.1581 | Time: 23.2528
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [321] Train Loss: 0.0304 | Train MAE: 0.0301 | Val Loss: 0.1888 | Val MAE: 0.1885 | Test MAE: 0.1584 | Time: 23.7555
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [322] Train Loss: 0.0301 | Train MAE: 0.0298 | Val Loss: 0.1882 | Val MAE: 0.1879 | Test MAE: 0.1603 | Time: 24.6673
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [323] Train Loss: 0.0321 | Train MAE: 0.0318 | Val Loss: 0.1864 | Val MAE: 0.1862 | Test MAE: 0.1573 | Time: 23.0128
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [324] Train Loss: 0.0312 | Train MAE: 0.0309 | Val Loss: 0.1863 | Val MAE: 0.1860 | Test MAE: 0.1574 | Time: 23.6825
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [325] Train Loss: 0.0306 | Train MAE: 0.0303 | Val Loss: 0.1895 | Val MAE: 0.1892 | Test MAE: 0.1592 | Time: 22.6280
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [326] Train Loss: 0.0329 | Train MAE: 0.0326 | Val Loss: 0.1870 | Val MAE: 0.1867 | Test MAE: 0.1576 | Time: 24.0694
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [327] Train Loss: 0.0302 | Train MAE: 0.0299 | Val Loss: 0.1870 | Val MAE: 0.1867 | Test MAE: 0.1565 | Time: 24.1180
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [328] Train Loss: 0.0270 | Train MAE: 0.0267 | Val Loss: 0.1864 | Val MAE: 0.1861 | Test MAE: 0.1559 | Time: 23.6737
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [329] Train Loss: 0.0308 | Train MAE: 0.0304 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1562 | Time: 23.3593
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [330] Train Loss: 0.0295 | Train MAE: 0.0292 | Val Loss: 0.1870 | Val MAE: 0.1868 | Test MAE: 0.1584 | Time: 23.7187
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [331] Train Loss: 0.0292 | Train MAE: 0.0289 | Val Loss: 0.1885 | Val MAE: 0.1882 | Test MAE: 0.1577 | Time: 23.7131
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [332] Train Loss: 0.0304 | Train MAE: 0.0301 | Val Loss: 0.1882 | Val MAE: 0.1879 | Test MAE: 0.1581 | Time: 23.6509
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [333] Train Loss: 0.0333 | Train MAE: 0.0330 | Val Loss: 0.1868 | Val MAE: 0.1865 | Test MAE: 0.1572 | Time: 23.9635
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [334] Train Loss: 0.0302 | Train MAE: 0.0299 | Val Loss: 0.1876 | Val MAE: 0.1874 | Test MAE: 0.1569 | Time: 23.5505
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [335] Train Loss: 0.0322 | Train MAE: 0.0319 | Val Loss: 0.1874 | Val MAE: 0.1871 | Test MAE: 0.1579 | Time: 21.8515
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [336] Train Loss: 0.0301 | Train MAE: 0.0298 | Val Loss: 0.1875 | Val MAE: 0.1873 | Test MAE: 0.1577 | Time: 21.9771
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [337] Train Loss: 0.0291 | Train MAE: 0.0288 | Val Loss: 0.1874 | Val MAE: 0.1871 | Test MAE: 0.1565 | Time: 23.2586
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [338] Train Loss: 0.0302 | Train MAE: 0.0299 | Val Loss: 0.1878 | Val MAE: 0.1875 | Test MAE: 0.1569 | Time: 21.7650
Epoch 00339: reducing learning rate of group 0 to 7.8125e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [339] Train Loss: 0.0299 | Train MAE: 0.0296 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1571 | Time: 22.7772
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [340] Train Loss: 0.0304 | Train MAE: 0.0301 | Val Loss: 0.1878 | Val MAE: 0.1875 | Test MAE: 0.1567 | Time: 25.6248
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [341] Train Loss: 0.0298 | Train MAE: 0.0295 | Val Loss: 0.1871 | Val MAE: 0.1868 | Test MAE: 0.1574 | Time: 22.1492
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [342] Train Loss: 0.0300 | Train MAE: 0.0297 | Val Loss: 0.1870 | Val MAE: 0.1867 | Test MAE: 0.1569 | Time: 22.0327
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [343] Train Loss: 0.0292 | Train MAE: 0.0289 | Val Loss: 0.1869 | Val MAE: 0.1866 | Test MAE: 0.1574 | Time: 21.8434
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [344] Train Loss: 0.0318 | Train MAE: 0.0315 | Val Loss: 0.1872 | Val MAE: 0.1869 | Test MAE: 0.1573 | Time: 22.2875
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [345] Train Loss: 0.0299 | Train MAE: 0.0296 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1564 | Time: 21.5936
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [346] Train Loss: 0.0300 | Train MAE: 0.0297 | Val Loss: 0.1865 | Val MAE: 0.1862 | Test MAE: 0.1564 | Time: 22.3918
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [347] Train Loss: 0.0302 | Train MAE: 0.0299 | Val Loss: 0.1869 | Val MAE: 0.1867 | Test MAE: 0.1562 | Time: 22.0470
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [348] Train Loss: 0.0266 | Train MAE: 0.0262 | Val Loss: 0.1878 | Val MAE: 0.1875 | Test MAE: 0.1570 | Time: 22.1326
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [349] Train Loss: 0.0300 | Train MAE: 0.0297 | Val Loss: 0.1868 | Val MAE: 0.1865 | Test MAE: 0.1572 | Time: 22.0728
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [350] Train Loss: 0.0296 | Train MAE: 0.0293 | Val Loss: 0.1874 | Val MAE: 0.1871 | Test MAE: 0.1577 | Time: 22.0982
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [351] Train Loss: 0.0316 | Train MAE: 0.0313 | Val Loss: 0.1878 | Val MAE: 0.1875 | Test MAE: 0.1579 | Time: 21.8947
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [352] Train Loss: 0.0289 | Train MAE: 0.0286 | Val Loss: 0.1879 | Val MAE: 0.1876 | Test MAE: 0.1572 | Time: 21.9189
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [353] Train Loss: 0.0297 | Train MAE: 0.0294 | Val Loss: 0.1869 | Val MAE: 0.1866 | Test MAE: 0.1573 | Time: 22.1029
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [354] Train Loss: 0.0282 | Train MAE: 0.0279 | Val Loss: 0.1867 | Val MAE: 0.1864 | Test MAE: 0.1577 | Time: 25.2316
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [355] Train Loss: 0.0277 | Train MAE: 0.0274 | Val Loss: 0.1876 | Val MAE: 0.1873 | Test MAE: 0.1568 | Time: 21.7501
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [356] Train Loss: 0.0318 | Train MAE: 0.0315 | Val Loss: 0.1880 | Val MAE: 0.1877 | Test MAE: 0.1583 | Time: 22.0186
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [357] Train Loss: 0.0302 | Train MAE: 0.0299 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1580 | Time: 21.8475
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [358] Train Loss: 0.0299 | Train MAE: 0.0296 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1578 | Time: 21.5946
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [359] Train Loss: 0.0298 | Train MAE: 0.0294 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1589 | Time: 21.5999
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [360] Train Loss: 0.0307 | Train MAE: 0.0304 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1580 | Time: 21.7670
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [361] Train Loss: 0.0303 | Train MAE: 0.0300 | Val Loss: 0.1876 | Val MAE: 0.1873 | Test MAE: 0.1564 | Time: 21.9220
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [362] Train Loss: 0.0295 | Train MAE: 0.0292 | Val Loss: 0.1869 | Val MAE: 0.1866 | Test MAE: 0.1576 | Time: 22.0777
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [363] Train Loss: 0.0285 | Train MAE: 0.0282 | Val Loss: 0.1887 | Val MAE: 0.1884 | Test MAE: 0.1584 | Time: 22.1945
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [364] Train Loss: 0.0282 | Train MAE: 0.0279 | Val Loss: 0.1876 | Val MAE: 0.1873 | Test MAE: 0.1565 | Time: 21.7719
Epoch 00365: reducing learning rate of group 0 to 3.9063e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [365] Train Loss: 0.0298 | Train MAE: 0.0295 | Val Loss: 0.1865 | Val MAE: 0.1862 | Test MAE: 0.1569 | Time: 21.4239
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [366] Train Loss: 0.0286 | Train MAE: 0.0283 | Val Loss: 0.1882 | Val MAE: 0.1879 | Test MAE: 0.1579 | Time: 21.7273
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [367] Train Loss: 0.0273 | Train MAE: 0.0270 | Val Loss: 0.1879 | Val MAE: 0.1876 | Test MAE: 0.1581 | Time: 22.3306
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [368] Train Loss: 0.0302 | Train MAE: 0.0299 | Val Loss: 0.1872 | Val MAE: 0.1869 | Test MAE: 0.1577 | Time: 22.0359
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [369] Train Loss: 0.0304 | Train MAE: 0.0301 | Val Loss: 0.1862 | Val MAE: 0.1860 | Test MAE: 0.1574 | Time: 22.2317
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [370] Train Loss: 0.0299 | Train MAE: 0.0296 | Val Loss: 0.1884 | Val MAE: 0.1881 | Test MAE: 0.1573 | Time: 22.6918
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [371] Train Loss: 0.0289 | Train MAE: 0.0286 | Val Loss: 0.1879 | Val MAE: 0.1876 | Test MAE: 0.1586 | Time: 23.6158
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [372] Train Loss: 0.0302 | Train MAE: 0.0299 | Val Loss: 0.1862 | Val MAE: 0.1859 | Test MAE: 0.1569 | Time: 22.4212
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [373] Train Loss: 0.0283 | Train MAE: 0.0280 | Val Loss: 0.1871 | Val MAE: 0.1868 | Test MAE: 0.1569 | Time: 22.2464
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [374] Train Loss: 0.0298 | Train MAE: 0.0295 | Val Loss: 0.1872 | Val MAE: 0.1869 | Test MAE: 0.1567 | Time: 22.5391
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [375] Train Loss: 0.0317 | Train MAE: 0.0314 | Val Loss: 0.1874 | Val MAE: 0.1871 | Test MAE: 0.1570 | Time: 22.6026
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [376] Train Loss: 0.0274 | Train MAE: 0.0271 | Val Loss: 0.1867 | Val MAE: 0.1864 | Test MAE: 0.1569 | Time: 21.9508
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [377] Train Loss: 0.0284 | Train MAE: 0.0281 | Val Loss: 0.1869 | Val MAE: 0.1866 | Test MAE: 0.1573 | Time: 22.5002
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [378] Train Loss: 0.0296 | Train MAE: 0.0293 | Val Loss: 0.1870 | Val MAE: 0.1867 | Test MAE: 0.1559 | Time: 23.0549
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [379] Train Loss: 0.0300 | Train MAE: 0.0297 | Val Loss: 0.1862 | Val MAE: 0.1860 | Test MAE: 0.1572 | Time: 23.2387
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [380] Train Loss: 0.0303 | Train MAE: 0.0300 | Val Loss: 0.1867 | Val MAE: 0.1864 | Test MAE: 0.1572 | Time: 22.7478
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [381] Train Loss: 0.0305 | Train MAE: 0.0302 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1565 | Time: 22.2039
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [382] Train Loss: 0.0316 | Train MAE: 0.0313 | Val Loss: 0.1876 | Val MAE: 0.1873 | Test MAE: 0.1579 | Time: 23.4174
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [383] Train Loss: 0.0315 | Train MAE: 0.0312 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1566 | Time: 22.5249
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [384] Train Loss: 0.0304 | Train MAE: 0.0300 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1581 | Time: 21.8836
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [385] Train Loss: 0.0270 | Train MAE: 0.0267 | Val Loss: 0.1869 | Val MAE: 0.1866 | Test MAE: 0.1584 | Time: 22.5871
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [386] Train Loss: 0.0289 | Train MAE: 0.0286 | Val Loss: 0.1865 | Val MAE: 0.1862 | Test MAE: 0.1571 | Time: 22.7287
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [387] Train Loss: 0.0296 | Train MAE: 0.0293 | Val Loss: 0.1874 | Val MAE: 0.1871 | Test MAE: 0.1581 | Time: 22.4630
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [388] Train Loss: 0.0329 | Train MAE: 0.0326 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1577 | Time: 21.9914
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [389] Train Loss: 0.0341 | Train MAE: 0.0338 | Val Loss: 0.1866 | Val MAE: 0.1863 | Test MAE: 0.1580 | Time: 22.3485
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [390] Train Loss: 0.0277 | Train MAE: 0.0274 | Val Loss: 0.1862 | Val MAE: 0.1859 | Test MAE: 0.1576 | Time: 22.1857
Epoch 00391: reducing learning rate of group 0 to 1.9531e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [391] Train Loss: 0.0261 | Train MAE: 0.0258 | Val Loss: 0.1870 | Val MAE: 0.1867 | Test MAE: 0.1571 | Time: 22.5937
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [392] Train Loss: 0.0300 | Train MAE: 0.0297 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1566 | Time: 22.1615
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [393] Train Loss: 0.0296 | Train MAE: 0.0293 | Val Loss: 0.1881 | Val MAE: 0.1878 | Test MAE: 0.1574 | Time: 22.6480
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [394] Train Loss: 0.0303 | Train MAE: 0.0300 | Val Loss: 0.1877 | Val MAE: 0.1874 | Test MAE: 0.1576 | Time: 22.9279
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [395] Train Loss: 0.0303 | Train MAE: 0.0300 | Val Loss: 0.1876 | Val MAE: 0.1874 | Test MAE: 0.1572 | Time: 21.9478
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [396] Train Loss: 0.0285 | Train MAE: 0.0282 | Val Loss: 0.1865 | Val MAE: 0.1862 | Test MAE: 0.1567 | Time: 23.0353
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [397] Train Loss: 0.0301 | Train MAE: 0.0298 | Val Loss: 0.1874 | Val MAE: 0.1871 | Test MAE: 0.1566 | Time: 22.5677
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [398] Train Loss: 0.0258 | Train MAE: 0.0255 | Val Loss: 0.1868 | Val MAE: 0.1865 | Test MAE: 0.1570 | Time: 21.9934
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [399] Train Loss: 0.0313 | Train MAE: 0.0310 | Val Loss: 0.1864 | Val MAE: 0.1861 | Test MAE: 0.1576 | Time: 22.4481
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [400] Train Loss: 0.0289 | Train MAE: 0.0286 | Val Loss: 0.1873 | Val MAE: 0.1870 | Test MAE: 0.1560 | Time: 22.3006
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [401] Train Loss: 0.0284 | Train MAE: 0.0281 | Val Loss: 0.1867 | Val MAE: 0.1864 | Test MAE: 0.1569 | Time: 22.2912
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [402] Train Loss: 0.0335 | Train MAE: 0.0332 | Val Loss: 0.1879 | Val MAE: 0.1876 | Test MAE: 0.1584 | Time: 22.4439
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [403] Train Loss: 0.0282 | Train MAE: 0.0279 | Val Loss: 0.1868 | Val MAE: 0.1865 | Test MAE: 0.1572 | Time: 21.9833
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [404] Train Loss: 0.0304 | Train MAE: 0.0301 | Val Loss: 0.1872 | Val MAE: 0.1869 | Test MAE: 0.1566 | Time: 22.2921
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [405] Train Loss: 0.0325 | Train MAE: 0.0322 | Val Loss: 0.1874 | Val MAE: 0.1871 | Test MAE: 0.1572 | Time: 23.2101
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [406] Train Loss: 0.0286 | Train MAE: 0.0283 | Val Loss: 0.1866 | Val MAE: 0.1863 | Test MAE: 0.1571 | Time: 23.0613
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [407] Train Loss: 0.0295 | Train MAE: 0.0292 | Val Loss: 0.1867 | Val MAE: 0.1864 | Test MAE: 0.1575 | Time: 23.1992
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [408] Train Loss: 0.0325 | Train MAE: 0.0322 | Val Loss: 0.1882 | Val MAE: 0.1879 | Test MAE: 0.1590 | Time: 23.0944
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [409] Train Loss: 0.0264 | Train MAE: 0.0260 | Val Loss: 0.1873 | Val MAE: 0.1871 | Test MAE: 0.1567 | Time: 23.4780
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [410] Train Loss: 0.0260 | Train MAE: 0.0257 | Val Loss: 0.1869 | Val MAE: 0.1866 | Test MAE: 0.1579 | Time: 23.4158
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [411] Train Loss: 0.0284 | Train MAE: 0.0281 | Val Loss: 0.1875 | Val MAE: 0.1872 | Test MAE: 0.1588 | Time: 22.9749
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [412] Train Loss: 0.0297 | Train MAE: 0.0294 | Val Loss: 0.1864 | Val MAE: 0.1861 | Test MAE: 0.1569 | Time: 23.6765
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [413] Train Loss: 0.0287 | Train MAE: 0.0284 | Val Loss: 0.1865 | Val MAE: 0.1862 | Test MAE: 0.1574 | Time: 22.1772
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [414] Train Loss: 0.0311 | Train MAE: 0.0308 | Val Loss: 0.1857 | Val MAE: 0.1854 | Test MAE: 0.1579 | Time: 22.4356
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [415] Train Loss: 0.0289 | Train MAE: 0.0285 | Val Loss: 0.1884 | Val MAE: 0.1881 | Test MAE: 0.1586 | Time: 26.1413
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [416] Train Loss: 0.0318 | Train MAE: 0.0315 | Val Loss: 0.1862 | Val MAE: 0.1859 | Test MAE: 0.1571 | Time: 22.1416
Epoch 00417: reducing learning rate of group 0 to 9.7656e-07.

!! LR EQUAL TO MIN LR SET.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Test MAE: 0.1571
Train MAE: 0.0119
Convergence Time (Epochs): 416.0000
TOTAL TIME TAKEN: 9851.6447s
AVG TIME PER EPOCH: 23.3172s
