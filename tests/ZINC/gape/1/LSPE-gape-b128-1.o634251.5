WARNING:root:The OGB package is out of date. Your version is 1.3.3, while the latest version is 1.3.4.
cuda available with GPU: NVIDIA TITAN X (Pascal)
[I] Loading dataset ZINC...
train, test, val sizes : 10000 1000 1000
[I] Finished loading.
[I] Data load time: 10.2591s
MODEL DETAILS:

MODEL/Total parameters: GatedGCN 528009
[!] Adding random automaton graph positional encoding (32).
Time PE:14.465004205703735
Training Graphs:  10000
Validation Graphs:  1000
Test Graphs:  1000
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [0] Train Loss: 1.4858 | Train MAE: 1.4846 | Val Loss: 1.4180 | Val MAE: 1.4169 | Test MAE: 1.5312 | Time: 23.7115
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [1] Train Loss: 1.4202 | Train MAE: 1.4190 | Val Loss: 1.3410 | Val MAE: 1.3399 | Test MAE: 1.4399 | Time: 23.7623
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [2] Train Loss: 1.3160 | Train MAE: 1.3149 | Val Loss: 1.1634 | Val MAE: 1.1622 | Test MAE: 1.2713 | Time: 24.0172
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [3] Train Loss: 1.2236 | Train MAE: 1.2224 | Val Loss: 1.0662 | Val MAE: 1.0651 | Test MAE: 1.1783 | Time: 24.0799
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [4] Train Loss: 1.1270 | Train MAE: 1.1258 | Val Loss: 1.0262 | Val MAE: 1.0250 | Test MAE: 1.1188 | Time: 24.0530
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [5] Train Loss: 1.0449 | Train MAE: 1.0437 | Val Loss: 0.9406 | Val MAE: 0.9394 | Test MAE: 1.0092 | Time: 24.0280
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [6] Train Loss: 0.9799 | Train MAE: 0.9787 | Val Loss: 0.9191 | Val MAE: 0.9179 | Test MAE: 1.0088 | Time: 23.2424
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [7] Train Loss: 0.9101 | Train MAE: 0.9090 | Val Loss: 0.8389 | Val MAE: 0.8379 | Test MAE: 0.9110 | Time: 24.4841
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [8] Train Loss: 0.8403 | Train MAE: 0.8392 | Val Loss: 0.7723 | Val MAE: 0.7713 | Test MAE: 0.8430 | Time: 23.6645
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [9] Train Loss: 0.7971 | Train MAE: 0.7960 | Val Loss: 0.7796 | Val MAE: 0.7786 | Test MAE: 0.8303 | Time: 24.3529
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [10] Train Loss: 0.7698 | Train MAE: 0.7686 | Val Loss: 0.7809 | Val MAE: 0.7798 | Test MAE: 0.8298 | Time: 23.7073
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [11] Train Loss: 0.7669 | Train MAE: 0.7657 | Val Loss: 0.7371 | Val MAE: 0.7359 | Test MAE: 0.8066 | Time: 23.6153
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [12] Train Loss: 0.7456 | Train MAE: 0.7445 | Val Loss: 0.7028 | Val MAE: 0.7016 | Test MAE: 0.7612 | Time: 25.2495
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [13] Train Loss: 0.7231 | Train MAE: 0.7219 | Val Loss: 0.7607 | Val MAE: 0.7596 | Test MAE: 0.8088 | Time: 23.3681
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [14] Train Loss: 0.7203 | Train MAE: 0.7191 | Val Loss: 0.6789 | Val MAE: 0.6778 | Test MAE: 0.7451 | Time: 27.4974
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [15] Train Loss: 0.7046 | Train MAE: 0.7034 | Val Loss: 0.6820 | Val MAE: 0.6809 | Test MAE: 0.7392 | Time: 23.2504
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [16] Train Loss: 0.6976 | Train MAE: 0.6964 | Val Loss: 0.7495 | Val MAE: 0.7483 | Test MAE: 0.8253 | Time: 26.8242
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [17] Train Loss: 0.6954 | Train MAE: 0.6942 | Val Loss: 0.6715 | Val MAE: 0.6704 | Test MAE: 0.7298 | Time: 23.5550
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [18] Train Loss: 0.6945 | Train MAE: 0.6933 | Val Loss: 0.6837 | Val MAE: 0.6826 | Test MAE: 0.7355 | Time: 24.1690
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [19] Train Loss: 0.6656 | Train MAE: 0.6644 | Val Loss: 0.7014 | Val MAE: 0.7003 | Test MAE: 0.7468 | Time: 23.8222
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [20] Train Loss: 0.6663 | Train MAE: 0.6651 | Val Loss: 0.7251 | Val MAE: 0.7240 | Test MAE: 0.7823 | Time: 23.9441
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [21] Train Loss: 0.6591 | Train MAE: 0.6579 | Val Loss: 0.7099 | Val MAE: 0.7088 | Test MAE: 0.7678 | Time: 24.3459
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [22] Train Loss: 0.6613 | Train MAE: 0.6601 | Val Loss: 0.6646 | Val MAE: 0.6635 | Test MAE: 0.7179 | Time: 24.1670
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [23] Train Loss: 0.6542 | Train MAE: 0.6530 | Val Loss: 0.6745 | Val MAE: 0.6734 | Test MAE: 0.7317 | Time: 23.3893
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [24] Train Loss: 0.6432 | Train MAE: 0.6420 | Val Loss: 0.6571 | Val MAE: 0.6560 | Test MAE: 0.7110 | Time: 23.7737
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [25] Train Loss: 0.6351 | Train MAE: 0.6339 | Val Loss: 0.5972 | Val MAE: 0.5961 | Test MAE: 0.6594 | Time: 23.6200
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [26] Train Loss: 0.6113 | Train MAE: 0.6101 | Val Loss: 0.6974 | Val MAE: 0.6963 | Test MAE: 0.7429 | Time: 24.4624
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [27] Train Loss: 0.6166 | Train MAE: 0.6154 | Val Loss: 0.5850 | Val MAE: 0.5838 | Test MAE: 0.6427 | Time: 23.1759
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [28] Train Loss: 0.5758 | Train MAE: 0.5746 | Val Loss: 0.5911 | Val MAE: 0.5900 | Test MAE: 0.6477 | Time: 23.4852
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [29] Train Loss: 0.5918 | Train MAE: 0.5906 | Val Loss: 0.6653 | Val MAE: 0.6641 | Test MAE: 0.7176 | Time: 23.3710
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [30] Train Loss: 0.5953 | Train MAE: 0.5941 | Val Loss: 0.7192 | Val MAE: 0.7181 | Test MAE: 0.7737 | Time: 24.5707
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [31] Train Loss: 0.5950 | Train MAE: 0.5938 | Val Loss: 0.6168 | Val MAE: 0.6157 | Test MAE: 0.6868 | Time: 23.0980
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [32] Train Loss: 0.6088 | Train MAE: 0.6076 | Val Loss: 0.6753 | Val MAE: 0.6742 | Test MAE: 0.7349 | Time: 23.5592
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [33] Train Loss: 0.5670 | Train MAE: 0.5658 | Val Loss: 0.5738 | Val MAE: 0.5727 | Test MAE: 0.6193 | Time: 24.0937
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [34] Train Loss: 0.5572 | Train MAE: 0.5560 | Val Loss: 0.6436 | Val MAE: 0.6425 | Test MAE: 0.6973 | Time: 23.6611
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [35] Train Loss: 0.5449 | Train MAE: 0.5437 | Val Loss: 0.5618 | Val MAE: 0.5607 | Test MAE: 0.6167 | Time: 24.4362
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [36] Train Loss: 0.7081 | Train MAE: 0.7070 | Val Loss: 0.6124 | Val MAE: 0.6112 | Test MAE: 0.6616 | Time: 23.9187
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [37] Train Loss: 0.7272 | Train MAE: 0.7260 | Val Loss: 0.6323 | Val MAE: 0.6312 | Test MAE: 0.6775 | Time: 23.5086
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [38] Train Loss: 0.6245 | Train MAE: 0.6233 | Val Loss: 0.6425 | Val MAE: 0.6414 | Test MAE: 0.7036 | Time: 23.5332
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [39] Train Loss: 0.6258 | Train MAE: 0.6246 | Val Loss: 0.6194 | Val MAE: 0.6183 | Test MAE: 0.6751 | Time: 23.6692
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [40] Train Loss: 0.6037 | Train MAE: 0.6025 | Val Loss: 0.5781 | Val MAE: 0.5770 | Test MAE: 0.6291 | Time: 23.8980
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [41] Train Loss: 0.5799 | Train MAE: 0.5787 | Val Loss: 0.5712 | Val MAE: 0.5700 | Test MAE: 0.6278 | Time: 23.7745
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [42] Train Loss: 0.5487 | Train MAE: 0.5475 | Val Loss: 0.6319 | Val MAE: 0.6308 | Test MAE: 0.6831 | Time: 23.9478
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [43] Train Loss: 0.5568 | Train MAE: 0.5556 | Val Loss: 0.6582 | Val MAE: 0.6570 | Test MAE: 0.6959 | Time: 23.9408
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [44] Train Loss: 0.5435 | Train MAE: 0.5423 | Val Loss: 0.6610 | Val MAE: 0.6599 | Test MAE: 0.7014 | Time: 23.8882
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [45] Train Loss: 0.5428 | Train MAE: 0.5416 | Val Loss: 0.5668 | Val MAE: 0.5657 | Test MAE: 0.6067 | Time: 23.6271
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [46] Train Loss: 0.5530 | Train MAE: 0.5518 | Val Loss: 0.5493 | Val MAE: 0.5482 | Test MAE: 0.5926 | Time: 24.7310
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [47] Train Loss: 0.5197 | Train MAE: 0.5185 | Val Loss: 0.5458 | Val MAE: 0.5447 | Test MAE: 0.5858 | Time: 23.6814
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [48] Train Loss: 0.5093 | Train MAE: 0.5081 | Val Loss: 0.6414 | Val MAE: 0.6403 | Test MAE: 0.6869 | Time: 23.7952
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [49] Train Loss: 0.5318 | Train MAE: 0.5306 | Val Loss: 0.5539 | Val MAE: 0.5528 | Test MAE: 0.6061 | Time: 23.4704
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [50] Train Loss: 0.5158 | Train MAE: 0.5146 | Val Loss: 0.6511 | Val MAE: 0.6500 | Test MAE: 0.7194 | Time: 23.7212
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [51] Train Loss: 0.5420 | Train MAE: 0.5408 | Val Loss: 0.6497 | Val MAE: 0.6485 | Test MAE: 0.7028 | Time: 23.4515
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [52] Train Loss: 0.5283 | Train MAE: 0.5271 | Val Loss: 0.6075 | Val MAE: 0.6064 | Test MAE: 0.6492 | Time: 24.1444
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [53] Train Loss: 0.5364 | Train MAE: 0.5352 | Val Loss: 0.5629 | Val MAE: 0.5618 | Test MAE: 0.6151 | Time: 25.0897
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [54] Train Loss: 0.5002 | Train MAE: 0.4990 | Val Loss: 0.5737 | Val MAE: 0.5726 | Test MAE: 0.6347 | Time: 23.7853
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [55] Train Loss: 0.4814 | Train MAE: 0.4802 | Val Loss: 0.6137 | Val MAE: 0.6125 | Test MAE: 0.6435 | Time: 23.7923
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [56] Train Loss: 0.4699 | Train MAE: 0.4687 | Val Loss: 0.5981 | Val MAE: 0.5970 | Test MAE: 0.6432 | Time: 23.9829
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [57] Train Loss: 0.4941 | Train MAE: 0.4930 | Val Loss: 0.6296 | Val MAE: 0.6285 | Test MAE: 0.6860 | Time: 24.0045
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [58] Train Loss: 0.4691 | Train MAE: 0.4679 | Val Loss: 0.5545 | Val MAE: 0.5533 | Test MAE: 0.6011 | Time: 23.1243
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [59] Train Loss: 0.4677 | Train MAE: 0.4665 | Val Loss: 0.5843 | Val MAE: 0.5831 | Test MAE: 0.6313 | Time: 24.1687
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [60] Train Loss: 0.4734 | Train MAE: 0.4722 | Val Loss: 0.5397 | Val MAE: 0.5386 | Test MAE: 0.5722 | Time: 23.2176
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [61] Train Loss: 0.4931 | Train MAE: 0.4919 | Val Loss: 0.6181 | Val MAE: 0.6170 | Test MAE: 0.6440 | Time: 24.4350
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [62] Train Loss: 0.4736 | Train MAE: 0.4724 | Val Loss: 0.5313 | Val MAE: 0.5301 | Test MAE: 0.5612 | Time: 24.4715
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [63] Train Loss: 0.4520 | Train MAE: 0.4508 | Val Loss: 0.5976 | Val MAE: 0.5964 | Test MAE: 0.6393 | Time: 23.6367
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [64] Train Loss: 0.4499 | Train MAE: 0.4487 | Val Loss: 0.5628 | Val MAE: 0.5617 | Test MAE: 0.6081 | Time: 23.3074
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [65] Train Loss: 0.4559 | Train MAE: 0.4547 | Val Loss: 0.5359 | Val MAE: 0.5348 | Test MAE: 0.5586 | Time: 23.7893
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [66] Train Loss: 0.4276 | Train MAE: 0.4264 | Val Loss: 0.5866 | Val MAE: 0.5855 | Test MAE: 0.6164 | Time: 23.3925
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [67] Train Loss: 0.4608 | Train MAE: 0.4596 | Val Loss: 0.5201 | Val MAE: 0.5190 | Test MAE: 0.5491 | Time: 23.5951
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [68] Train Loss: 0.4389 | Train MAE: 0.4377 | Val Loss: 0.5713 | Val MAE: 0.5702 | Test MAE: 0.6065 | Time: 25.1803
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [69] Train Loss: 0.4551 | Train MAE: 0.4539 | Val Loss: 0.5426 | Val MAE: 0.5415 | Test MAE: 0.5744 | Time: 24.3109
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [70] Train Loss: 0.4314 | Train MAE: 0.4302 | Val Loss: 0.5949 | Val MAE: 0.5938 | Test MAE: 0.6160 | Time: 26.7531
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [71] Train Loss: 0.4500 | Train MAE: 0.4488 | Val Loss: 0.6436 | Val MAE: 0.6425 | Test MAE: 0.6954 | Time: 23.7675
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [72] Train Loss: 0.4540 | Train MAE: 0.4528 | Val Loss: 0.5113 | Val MAE: 0.5101 | Test MAE: 0.5453 | Time: 23.2795
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [73] Train Loss: 0.4757 | Train MAE: 0.4745 | Val Loss: 0.5112 | Val MAE: 0.5101 | Test MAE: 0.5464 | Time: 24.6554
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [74] Train Loss: 0.4498 | Train MAE: 0.4486 | Val Loss: 0.5206 | Val MAE: 0.5195 | Test MAE: 0.5561 | Time: 23.8184
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [75] Train Loss: 0.4329 | Train MAE: 0.4317 | Val Loss: 0.5229 | Val MAE: 0.5218 | Test MAE: 0.5454 | Time: 23.8580
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [76] Train Loss: 0.4284 | Train MAE: 0.4272 | Val Loss: 0.5253 | Val MAE: 0.5242 | Test MAE: 0.5605 | Time: 23.6269
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [77] Train Loss: 0.4412 | Train MAE: 0.4400 | Val Loss: 0.5729 | Val MAE: 0.5718 | Test MAE: 0.6042 | Time: 24.2135
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [78] Train Loss: 0.4277 | Train MAE: 0.4265 | Val Loss: 0.5132 | Val MAE: 0.5121 | Test MAE: 0.5471 | Time: 23.8975
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [79] Train Loss: 0.4117 | Train MAE: 0.4105 | Val Loss: 0.5272 | Val MAE: 0.5261 | Test MAE: 0.5532 | Time: 23.9907
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [80] Train Loss: 0.4145 | Train MAE: 0.4133 | Val Loss: 0.5194 | Val MAE: 0.5183 | Test MAE: 0.5428 | Time: 24.3815
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [81] Train Loss: 0.4338 | Train MAE: 0.4326 | Val Loss: 0.6092 | Val MAE: 0.6080 | Test MAE: 0.6313 | Time: 24.5586
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [82] Train Loss: 0.4281 | Train MAE: 0.4269 | Val Loss: 0.4945 | Val MAE: 0.4934 | Test MAE: 0.5286 | Time: 24.3932
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [83] Train Loss: 0.4153 | Train MAE: 0.4141 | Val Loss: 0.5226 | Val MAE: 0.5214 | Test MAE: 0.5578 | Time: 24.2605
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [84] Train Loss: 0.4131 | Train MAE: 0.4119 | Val Loss: 0.5577 | Val MAE: 0.5566 | Test MAE: 0.5849 | Time: 24.7793
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [85] Train Loss: 0.4236 | Train MAE: 0.4224 | Val Loss: 0.5140 | Val MAE: 0.5129 | Test MAE: 0.5379 | Time: 27.0849
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [86] Train Loss: 0.3932 | Train MAE: 0.3920 | Val Loss: 0.5749 | Val MAE: 0.5738 | Test MAE: 0.5858 | Time: 23.5657
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [87] Train Loss: 0.4256 | Train MAE: 0.4244 | Val Loss: 0.5350 | Val MAE: 0.5339 | Test MAE: 0.5558 | Time: 23.8520
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [88] Train Loss: 0.3943 | Train MAE: 0.3931 | Val Loss: 0.5921 | Val MAE: 0.5910 | Test MAE: 0.6069 | Time: 23.7357
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [89] Train Loss: 0.4034 | Train MAE: 0.4022 | Val Loss: 0.5134 | Val MAE: 0.5123 | Test MAE: 0.5258 | Time: 23.7747
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [90] Train Loss: 0.3964 | Train MAE: 0.3952 | Val Loss: 0.5618 | Val MAE: 0.5606 | Test MAE: 0.5591 | Time: 23.6755
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [91] Train Loss: 0.4016 | Train MAE: 0.4004 | Val Loss: 0.5267 | Val MAE: 0.5256 | Test MAE: 0.5425 | Time: 23.5767
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [92] Train Loss: 0.4322 | Train MAE: 0.4310 | Val Loss: 0.5836 | Val MAE: 0.5824 | Test MAE: 0.6036 | Time: 23.5574
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [93] Train Loss: 0.4420 | Train MAE: 0.4408 | Val Loss: 0.5264 | Val MAE: 0.5253 | Test MAE: 0.5436 | Time: 23.9977
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [94] Train Loss: 0.4148 | Train MAE: 0.4136 | Val Loss: 0.5374 | Val MAE: 0.5363 | Test MAE: 0.5535 | Time: 23.9626
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [95] Train Loss: 0.3870 | Train MAE: 0.3858 | Val Loss: 0.5201 | Val MAE: 0.5190 | Test MAE: 0.5397 | Time: 23.8001
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [96] Train Loss: 0.3893 | Train MAE: 0.3881 | Val Loss: 0.6659 | Val MAE: 0.6647 | Test MAE: 0.6923 | Time: 23.1157
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [97] Train Loss: 0.3917 | Train MAE: 0.3905 | Val Loss: 0.5450 | Val MAE: 0.5438 | Test MAE: 0.5590 | Time: 24.2294
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [98] Train Loss: 0.4041 | Train MAE: 0.4029 | Val Loss: 0.5651 | Val MAE: 0.5640 | Test MAE: 0.5831 | Time: 23.7593
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [99] Train Loss: 0.4071 | Train MAE: 0.4059 | Val Loss: 0.5341 | Val MAE: 0.5330 | Test MAE: 0.5423 | Time: 23.9799
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [100] Train Loss: 0.3896 | Train MAE: 0.3884 | Val Loss: 0.5439 | Val MAE: 0.5427 | Test MAE: 0.5594 | Time: 23.8764
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [101] Train Loss: 0.4208 | Train MAE: 0.4196 | Val Loss: 0.5356 | Val MAE: 0.5345 | Test MAE: 0.5470 | Time: 23.3724
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [102] Train Loss: 0.3956 | Train MAE: 0.3944 | Val Loss: 0.5318 | Val MAE: 0.5307 | Test MAE: 0.5367 | Time: 25.4789
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [103] Train Loss: 0.3694 | Train MAE: 0.3682 | Val Loss: 0.4883 | Val MAE: 0.4872 | Test MAE: 0.5002 | Time: 23.9489
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [104] Train Loss: 0.3668 | Train MAE: 0.3656 | Val Loss: 0.5189 | Val MAE: 0.5177 | Test MAE: 0.5347 | Time: 24.3104
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [105] Train Loss: 0.3657 | Train MAE: 0.3645 | Val Loss: 0.5194 | Val MAE: 0.5183 | Test MAE: 0.5169 | Time: 24.0337
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [106] Train Loss: 0.4014 | Train MAE: 0.4002 | Val Loss: 0.5421 | Val MAE: 0.5410 | Test MAE: 0.5518 | Time: 23.5529
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [107] Train Loss: 0.3773 | Train MAE: 0.3761 | Val Loss: 0.5307 | Val MAE: 0.5296 | Test MAE: 0.5415 | Time: 25.2213
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [108] Train Loss: 0.3782 | Train MAE: 0.3770 | Val Loss: 0.5151 | Val MAE: 0.5139 | Test MAE: 0.5173 | Time: 23.7886
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [109] Train Loss: 0.4029 | Train MAE: 0.4017 | Val Loss: 0.5505 | Val MAE: 0.5493 | Test MAE: 0.5551 | Time: 23.7231
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [110] Train Loss: 0.4143 | Train MAE: 0.4131 | Val Loss: 0.5244 | Val MAE: 0.5232 | Test MAE: 0.5325 | Time: 23.5431
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [111] Train Loss: 0.3684 | Train MAE: 0.3672 | Val Loss: 0.5445 | Val MAE: 0.5434 | Test MAE: 0.5468 | Time: 23.6048
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [112] Train Loss: 0.3998 | Train MAE: 0.3986 | Val Loss: 0.5239 | Val MAE: 0.5228 | Test MAE: 0.5372 | Time: 24.2396
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [113] Train Loss: 0.3642 | Train MAE: 0.3630 | Val Loss: 0.4974 | Val MAE: 0.4963 | Test MAE: 0.5095 | Time: 23.9933
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [114] Train Loss: 0.3628 | Train MAE: 0.3616 | Val Loss: 0.5155 | Val MAE: 0.5144 | Test MAE: 0.5243 | Time: 23.3121
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [115] Train Loss: 0.3567 | Train MAE: 0.3554 | Val Loss: 0.5612 | Val MAE: 0.5601 | Test MAE: 0.5677 | Time: 24.1345
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [116] Train Loss: 0.4433 | Train MAE: 0.4421 | Val Loss: 0.6537 | Val MAE: 0.6526 | Test MAE: 0.6573 | Time: 27.5278
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [117] Train Loss: 0.3780 | Train MAE: 0.3768 | Val Loss: 0.5127 | Val MAE: 0.5115 | Test MAE: 0.5249 | Time: 25.5233
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [118] Train Loss: 0.3711 | Train MAE: 0.3699 | Val Loss: 0.5123 | Val MAE: 0.5112 | Test MAE: 0.5186 | Time: 23.8958
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [119] Train Loss: 0.3495 | Train MAE: 0.3483 | Val Loss: 0.5959 | Val MAE: 0.5948 | Test MAE: 0.6025 | Time: 24.7227
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [120] Train Loss: 0.3772 | Train MAE: 0.3759 | Val Loss: 0.6027 | Val MAE: 0.6016 | Test MAE: 0.6091 | Time: 24.4212
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [121] Train Loss: 0.3753 | Train MAE: 0.3741 | Val Loss: 0.5068 | Val MAE: 0.5057 | Test MAE: 0.5253 | Time: 24.9601
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [122] Train Loss: 0.3428 | Train MAE: 0.3416 | Val Loss: 0.5101 | Val MAE: 0.5090 | Test MAE: 0.5056 | Time: 24.9388
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [123] Train Loss: 0.3638 | Train MAE: 0.3626 | Val Loss: 0.6534 | Val MAE: 0.6523 | Test MAE: 0.6812 | Time: 25.3760
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [124] Train Loss: 0.3569 | Train MAE: 0.3557 | Val Loss: 0.5172 | Val MAE: 0.5161 | Test MAE: 0.5111 | Time: 23.6130
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [125] Train Loss: 0.3298 | Train MAE: 0.3286 | Val Loss: 0.5023 | Val MAE: 0.5012 | Test MAE: 0.4929 | Time: 23.5566
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [126] Train Loss: 0.3132 | Train MAE: 0.3120 | Val Loss: 0.5824 | Val MAE: 0.5813 | Test MAE: 0.5827 | Time: 24.3940
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [127] Train Loss: 0.3450 | Train MAE: 0.3438 | Val Loss: 0.5456 | Val MAE: 0.5445 | Test MAE: 0.5514 | Time: 23.9471
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [128] Train Loss: 0.3708 | Train MAE: 0.3696 | Val Loss: 0.5204 | Val MAE: 0.5193 | Test MAE: 0.5236 | Time: 23.5507
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [129] Train Loss: 0.3683 | Train MAE: 0.3671 | Val Loss: 0.5413 | Val MAE: 0.5402 | Test MAE: 0.5447 | Time: 23.9374
Epoch 00130: reducing learning rate of group 0 to 5.0000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [130] Train Loss: 0.3024 | Train MAE: 0.3012 | Val Loss: 0.5063 | Val MAE: 0.5052 | Test MAE: 0.5017 | Time: 24.2593
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [131] Train Loss: 0.2860 | Train MAE: 0.2848 | Val Loss: 0.5081 | Val MAE: 0.5070 | Test MAE: 0.5014 | Time: 23.5717
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [132] Train Loss: 0.2951 | Train MAE: 0.2939 | Val Loss: 0.5506 | Val MAE: 0.5494 | Test MAE: 0.5386 | Time: 23.7291
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [133] Train Loss: 0.3097 | Train MAE: 0.3085 | Val Loss: 0.5345 | Val MAE: 0.5334 | Test MAE: 0.5425 | Time: 23.4187
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [134] Train Loss: 0.3010 | Train MAE: 0.2998 | Val Loss: 0.4842 | Val MAE: 0.4831 | Test MAE: 0.4703 | Time: 23.3106
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [135] Train Loss: 0.2826 | Train MAE: 0.2814 | Val Loss: 0.4923 | Val MAE: 0.4912 | Test MAE: 0.4751 | Time: 23.9527
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [136] Train Loss: 0.2656 | Train MAE: 0.2644 | Val Loss: 0.5556 | Val MAE: 0.5545 | Test MAE: 0.5436 | Time: 23.9535
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [137] Train Loss: 0.2750 | Train MAE: 0.2738 | Val Loss: 0.4967 | Val MAE: 0.4956 | Test MAE: 0.4902 | Time: 24.1671
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [138] Train Loss: 0.2798 | Train MAE: 0.2786 | Val Loss: 0.4905 | Val MAE: 0.4894 | Test MAE: 0.4754 | Time: 23.8245
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [139] Train Loss: 0.2634 | Train MAE: 0.2622 | Val Loss: 0.4894 | Val MAE: 0.4883 | Test MAE: 0.4712 | Time: 23.7794
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [140] Train Loss: 0.2847 | Train MAE: 0.2835 | Val Loss: 0.5026 | Val MAE: 0.5015 | Test MAE: 0.4864 | Time: 26.7588
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [141] Train Loss: 0.2863 | Train MAE: 0.2851 | Val Loss: 0.5079 | Val MAE: 0.5068 | Test MAE: 0.5054 | Time: 24.5169
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [142] Train Loss: 0.2844 | Train MAE: 0.2832 | Val Loss: 0.5032 | Val MAE: 0.5021 | Test MAE: 0.5027 | Time: 23.4535
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [143] Train Loss: 0.2862 | Train MAE: 0.2850 | Val Loss: 0.4987 | Val MAE: 0.4976 | Test MAE: 0.4958 | Time: 23.6180
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [144] Train Loss: 0.2777 | Train MAE: 0.2765 | Val Loss: 0.4903 | Val MAE: 0.4892 | Test MAE: 0.4849 | Time: 23.8896
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [145] Train Loss: 0.2753 | Train MAE: 0.2741 | Val Loss: 0.4974 | Val MAE: 0.4963 | Test MAE: 0.4926 | Time: 23.5860
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [146] Train Loss: 0.2978 | Train MAE: 0.2966 | Val Loss: 0.4905 | Val MAE: 0.4894 | Test MAE: 0.4816 | Time: 23.8066
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [147] Train Loss: 0.2876 | Train MAE: 0.2864 | Val Loss: 0.4812 | Val MAE: 0.4801 | Test MAE: 0.4672 | Time: 24.4137
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [148] Train Loss: 0.2792 | Train MAE: 0.2780 | Val Loss: 0.4874 | Val MAE: 0.4862 | Test MAE: 0.4889 | Time: 23.6926
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [149] Train Loss: 0.2700 | Train MAE: 0.2688 | Val Loss: 0.4973 | Val MAE: 0.4962 | Test MAE: 0.4924 | Time: 27.0236
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [150] Train Loss: 0.2737 | Train MAE: 0.2725 | Val Loss: 0.4942 | Val MAE: 0.4931 | Test MAE: 0.4833 | Time: 23.7507
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [151] Train Loss: 0.2537 | Train MAE: 0.2525 | Val Loss: 0.4816 | Val MAE: 0.4805 | Test MAE: 0.4767 | Time: 23.9123
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [152] Train Loss: 0.2814 | Train MAE: 0.2802 | Val Loss: 0.5352 | Val MAE: 0.5341 | Test MAE: 0.5169 | Time: 23.7684
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [153] Train Loss: 0.2775 | Train MAE: 0.2763 | Val Loss: 0.5271 | Val MAE: 0.5260 | Test MAE: 0.5060 | Time: 24.0295
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [154] Train Loss: 0.2615 | Train MAE: 0.2603 | Val Loss: 0.5108 | Val MAE: 0.5096 | Test MAE: 0.5258 | Time: 23.9478
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [155] Train Loss: 0.2532 | Train MAE: 0.2520 | Val Loss: 0.4828 | Val MAE: 0.4817 | Test MAE: 0.4718 | Time: 23.6722
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [156] Train Loss: 0.2668 | Train MAE: 0.2656 | Val Loss: 0.5265 | Val MAE: 0.5254 | Test MAE: 0.5114 | Time: 27.2272
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [157] Train Loss: 0.2563 | Train MAE: 0.2550 | Val Loss: 0.4913 | Val MAE: 0.4902 | Test MAE: 0.4897 | Time: 23.6995
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [158] Train Loss: 0.2773 | Train MAE: 0.2761 | Val Loss: 0.4998 | Val MAE: 0.4987 | Test MAE: 0.5030 | Time: 24.0768
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [159] Train Loss: 0.2752 | Train MAE: 0.2740 | Val Loss: 0.4964 | Val MAE: 0.4952 | Test MAE: 0.4885 | Time: 23.5265
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [160] Train Loss: 0.2633 | Train MAE: 0.2621 | Val Loss: 0.5121 | Val MAE: 0.5109 | Test MAE: 0.4923 | Time: 23.7077
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [161] Train Loss: 0.2541 | Train MAE: 0.2529 | Val Loss: 0.4908 | Val MAE: 0.4897 | Test MAE: 0.4779 | Time: 24.2763
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [162] Train Loss: 0.2666 | Train MAE: 0.2654 | Val Loss: 0.4907 | Val MAE: 0.4896 | Test MAE: 0.4754 | Time: 23.5718
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [163] Train Loss: 0.2504 | Train MAE: 0.2492 | Val Loss: 0.5161 | Val MAE: 0.5150 | Test MAE: 0.5191 | Time: 23.7835
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [164] Train Loss: 0.2545 | Train MAE: 0.2533 | Val Loss: 0.5154 | Val MAE: 0.5142 | Test MAE: 0.4991 | Time: 23.3049
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [165] Train Loss: 0.2546 | Train MAE: 0.2533 | Val Loss: 0.4949 | Val MAE: 0.4937 | Test MAE: 0.4761 | Time: 24.0917
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [166] Train Loss: 0.2592 | Train MAE: 0.2580 | Val Loss: 0.5084 | Val MAE: 0.5073 | Test MAE: 0.5067 | Time: 23.9485
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [167] Train Loss: 0.2761 | Train MAE: 0.2749 | Val Loss: 0.4962 | Val MAE: 0.4951 | Test MAE: 0.4825 | Time: 23.6206
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [168] Train Loss: 0.2602 | Train MAE: 0.2590 | Val Loss: 0.4859 | Val MAE: 0.4848 | Test MAE: 0.4711 | Time: 24.2334
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [169] Train Loss: 0.2788 | Train MAE: 0.2776 | Val Loss: 0.5298 | Val MAE: 0.5287 | Test MAE: 0.5152 | Time: 23.7994
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [170] Train Loss: 0.2601 | Train MAE: 0.2589 | Val Loss: 0.5394 | Val MAE: 0.5382 | Test MAE: 0.5390 | Time: 23.7229
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [171] Train Loss: 0.2802 | Train MAE: 0.2790 | Val Loss: 0.5471 | Val MAE: 0.5460 | Test MAE: 0.5528 | Time: 23.7787
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [172] Train Loss: 0.2908 | Train MAE: 0.2896 | Val Loss: 0.5033 | Val MAE: 0.5021 | Test MAE: 0.4918 | Time: 25.8538
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [173] Train Loss: 0.2549 | Train MAE: 0.2537 | Val Loss: 0.4868 | Val MAE: 0.4856 | Test MAE: 0.4808 | Time: 23.7393
Epoch 00174: reducing learning rate of group 0 to 2.5000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [174] Train Loss: 0.2333 | Train MAE: 0.2321 | Val Loss: 0.4889 | Val MAE: 0.4878 | Test MAE: 0.4756 | Time: 23.7896
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [175] Train Loss: 0.2447 | Train MAE: 0.2435 | Val Loss: 0.4837 | Val MAE: 0.4826 | Test MAE: 0.4769 | Time: 23.9157
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [176] Train Loss: 0.2180 | Train MAE: 0.2168 | Val Loss: 0.4943 | Val MAE: 0.4932 | Test MAE: 0.4836 | Time: 23.6124
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [177] Train Loss: 0.2272 | Train MAE: 0.2260 | Val Loss: 0.5208 | Val MAE: 0.5197 | Test MAE: 0.5141 | Time: 23.4908
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [178] Train Loss: 0.2338 | Train MAE: 0.2326 | Val Loss: 0.4838 | Val MAE: 0.4827 | Test MAE: 0.4647 | Time: 24.2934
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [179] Train Loss: 0.2244 | Train MAE: 0.2232 | Val Loss: 0.4913 | Val MAE: 0.4902 | Test MAE: 0.4848 | Time: 23.8095
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [180] Train Loss: 0.2175 | Train MAE: 0.2162 | Val Loss: 0.4962 | Val MAE: 0.4951 | Test MAE: 0.4886 | Time: 24.2026
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [181] Train Loss: 0.2226 | Train MAE: 0.2214 | Val Loss: 0.4877 | Val MAE: 0.4866 | Test MAE: 0.4700 | Time: 22.9702
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [182] Train Loss: 0.2207 | Train MAE: 0.2195 | Val Loss: 0.4903 | Val MAE: 0.4892 | Test MAE: 0.4739 | Time: 24.0873
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [183] Train Loss: 0.2205 | Train MAE: 0.2193 | Val Loss: 0.4841 | Val MAE: 0.4830 | Test MAE: 0.4676 | Time: 22.9539
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [184] Train Loss: 0.2051 | Train MAE: 0.2039 | Val Loss: 0.4888 | Val MAE: 0.4876 | Test MAE: 0.4767 | Time: 23.5911
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [185] Train Loss: 0.2143 | Train MAE: 0.2131 | Val Loss: 0.4857 | Val MAE: 0.4846 | Test MAE: 0.4645 | Time: 25.5918
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [186] Train Loss: 0.2058 | Train MAE: 0.2046 | Val Loss: 0.4832 | Val MAE: 0.4821 | Test MAE: 0.4679 | Time: 23.8591
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [187] Train Loss: 0.2177 | Train MAE: 0.2165 | Val Loss: 0.4932 | Val MAE: 0.4921 | Test MAE: 0.4682 | Time: 23.3692
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [188] Train Loss: 0.2210 | Train MAE: 0.2198 | Val Loss: 0.4986 | Val MAE: 0.4975 | Test MAE: 0.4769 | Time: 25.9595
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [189] Train Loss: 0.2257 | Train MAE: 0.2245 | Val Loss: 0.4985 | Val MAE: 0.4973 | Test MAE: 0.4771 | Time: 23.6680
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [190] Train Loss: 0.2227 | Train MAE: 0.2215 | Val Loss: 0.4876 | Val MAE: 0.4864 | Test MAE: 0.4706 | Time: 23.6455
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [191] Train Loss: 0.2161 | Train MAE: 0.2149 | Val Loss: 0.4836 | Val MAE: 0.4824 | Test MAE: 0.4715 | Time: 23.7063
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [192] Train Loss: 0.2096 | Train MAE: 0.2084 | Val Loss: 0.4862 | Val MAE: 0.4851 | Test MAE: 0.4736 | Time: 24.6444
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [193] Train Loss: 0.2135 | Train MAE: 0.2123 | Val Loss: 0.4808 | Val MAE: 0.4797 | Test MAE: 0.4676 | Time: 23.5551
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [194] Train Loss: 0.2128 | Train MAE: 0.2116 | Val Loss: 0.4840 | Val MAE: 0.4829 | Test MAE: 0.4715 | Time: 23.2708
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [195] Train Loss: 0.2032 | Train MAE: 0.2020 | Val Loss: 0.4970 | Val MAE: 0.4959 | Test MAE: 0.4829 | Time: 23.6325
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [196] Train Loss: 0.2050 | Train MAE: 0.2038 | Val Loss: 0.4936 | Val MAE: 0.4925 | Test MAE: 0.4776 | Time: 23.4705
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [197] Train Loss: 0.2004 | Train MAE: 0.1992 | Val Loss: 0.4870 | Val MAE: 0.4858 | Test MAE: 0.4727 | Time: 24.9039
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [198] Train Loss: 0.2122 | Train MAE: 0.2110 | Val Loss: 0.4924 | Val MAE: 0.4912 | Test MAE: 0.4768 | Time: 23.0713
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [199] Train Loss: 0.2185 | Train MAE: 0.2173 | Val Loss: 0.4898 | Val MAE: 0.4886 | Test MAE: 0.4818 | Time: 24.3648
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [200] Train Loss: 0.2116 | Train MAE: 0.2104 | Val Loss: 0.4974 | Val MAE: 0.4962 | Test MAE: 0.4815 | Time: 23.6933
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [201] Train Loss: 0.2084 | Train MAE: 0.2072 | Val Loss: 0.4936 | Val MAE: 0.4925 | Test MAE: 0.4743 | Time: 25.7051
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [202] Train Loss: 0.2072 | Train MAE: 0.2060 | Val Loss: 0.4867 | Val MAE: 0.4856 | Test MAE: 0.4708 | Time: 23.7223
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [203] Train Loss: 0.2117 | Train MAE: 0.2105 | Val Loss: 0.4877 | Val MAE: 0.4865 | Test MAE: 0.4795 | Time: 23.7099
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [204] Train Loss: 0.2011 | Train MAE: 0.1999 | Val Loss: 0.4864 | Val MAE: 0.4853 | Test MAE: 0.4717 | Time: 23.7245
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [205] Train Loss: 0.2017 | Train MAE: 0.2005 | Val Loss: 0.4834 | Val MAE: 0.4823 | Test MAE: 0.4718 | Time: 23.6350
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [206] Train Loss: 0.2017 | Train MAE: 0.2005 | Val Loss: 0.4868 | Val MAE: 0.4857 | Test MAE: 0.4716 | Time: 24.2811
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [207] Train Loss: 0.2031 | Train MAE: 0.2019 | Val Loss: 0.4961 | Val MAE: 0.4950 | Test MAE: 0.4762 | Time: 23.4098
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [208] Train Loss: 0.1929 | Train MAE: 0.1917 | Val Loss: 0.4810 | Val MAE: 0.4799 | Test MAE: 0.4649 | Time: 24.6731
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [209] Train Loss: 0.2049 | Train MAE: 0.2037 | Val Loss: 0.5171 | Val MAE: 0.5160 | Test MAE: 0.5017 | Time: 24.1874
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [210] Train Loss: 0.2031 | Train MAE: 0.2019 | Val Loss: 0.4961 | Val MAE: 0.4949 | Test MAE: 0.4724 | Time: 23.7983
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [211] Train Loss: 0.2187 | Train MAE: 0.2175 | Val Loss: 0.4940 | Val MAE: 0.4929 | Test MAE: 0.4804 | Time: 23.9732
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [212] Train Loss: 0.2138 | Train MAE: 0.2126 | Val Loss: 0.4954 | Val MAE: 0.4943 | Test MAE: 0.4807 | Time: 23.4605
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [213] Train Loss: 0.2158 | Train MAE: 0.2146 | Val Loss: 0.5111 | Val MAE: 0.5100 | Test MAE: 0.4947 | Time: 23.8559
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [214] Train Loss: 0.2042 | Train MAE: 0.2030 | Val Loss: 0.4869 | Val MAE: 0.4858 | Test MAE: 0.4703 | Time: 23.8536
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [215] Train Loss: 0.1963 | Train MAE: 0.1951 | Val Loss: 0.5044 | Val MAE: 0.5033 | Test MAE: 0.4798 | Time: 23.7637
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [216] Train Loss: 0.1959 | Train MAE: 0.1947 | Val Loss: 0.4944 | Val MAE: 0.4933 | Test MAE: 0.4770 | Time: 23.7107
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [217] Train Loss: 0.1987 | Train MAE: 0.1975 | Val Loss: 0.4937 | Val MAE: 0.4925 | Test MAE: 0.4737 | Time: 23.6623
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [218] Train Loss: 0.2160 | Train MAE: 0.2148 | Val Loss: 0.4923 | Val MAE: 0.4911 | Test MAE: 0.4689 | Time: 24.5132
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [219] Train Loss: 0.2048 | Train MAE: 0.2036 | Val Loss: 0.4912 | Val MAE: 0.4900 | Test MAE: 0.4731 | Time: 23.8108
Epoch 00220: reducing learning rate of group 0 to 1.2500e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [220] Train Loss: 0.1873 | Train MAE: 0.1861 | Val Loss: 0.4851 | Val MAE: 0.4840 | Test MAE: 0.4654 | Time: 23.4059
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [221] Train Loss: 0.1833 | Train MAE: 0.1821 | Val Loss: 0.4945 | Val MAE: 0.4934 | Test MAE: 0.4733 | Time: 23.8547
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [222] Train Loss: 0.1846 | Train MAE: 0.1834 | Val Loss: 0.4901 | Val MAE: 0.4889 | Test MAE: 0.4627 | Time: 24.1028
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [223] Train Loss: 0.1851 | Train MAE: 0.1839 | Val Loss: 0.4882 | Val MAE: 0.4870 | Test MAE: 0.4671 | Time: 23.8277
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [224] Train Loss: 0.1862 | Train MAE: 0.1850 | Val Loss: 0.4904 | Val MAE: 0.4893 | Test MAE: 0.4693 | Time: 23.4149
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [225] Train Loss: 0.1930 | Train MAE: 0.1918 | Val Loss: 0.4918 | Val MAE: 0.4906 | Test MAE: 0.4710 | Time: 24.0717
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [226] Train Loss: 0.1851 | Train MAE: 0.1839 | Val Loss: 0.4853 | Val MAE: 0.4842 | Test MAE: 0.4682 | Time: 23.9563
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [227] Train Loss: 0.1722 | Train MAE: 0.1710 | Val Loss: 0.4954 | Val MAE: 0.4943 | Test MAE: 0.4748 | Time: 23.6122
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [228] Train Loss: 0.1819 | Train MAE: 0.1806 | Val Loss: 0.4821 | Val MAE: 0.4809 | Test MAE: 0.4580 | Time: 23.8512
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [229] Train Loss: 0.1859 | Train MAE: 0.1847 | Val Loss: 0.5020 | Val MAE: 0.5008 | Test MAE: 0.4793 | Time: 24.0396
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [230] Train Loss: 0.1733 | Train MAE: 0.1721 | Val Loss: 0.4907 | Val MAE: 0.4896 | Test MAE: 0.4675 | Time: 23.7825
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [231] Train Loss: 0.1800 | Train MAE: 0.1788 | Val Loss: 0.4823 | Val MAE: 0.4812 | Test MAE: 0.4642 | Time: 26.8316
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [232] Train Loss: 0.1878 | Train MAE: 0.1866 | Val Loss: 0.4843 | Val MAE: 0.4831 | Test MAE: 0.4633 | Time: 24.0811
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [233] Train Loss: 0.1928 | Train MAE: 0.1916 | Val Loss: 0.4844 | Val MAE: 0.4832 | Test MAE: 0.4693 | Time: 23.4581
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [234] Train Loss: 0.1708 | Train MAE: 0.1696 | Val Loss: 0.4869 | Val MAE: 0.4858 | Test MAE: 0.4643 | Time: 23.5115
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [235] Train Loss: 0.1964 | Train MAE: 0.1952 | Val Loss: 0.5101 | Val MAE: 0.5089 | Test MAE: 0.4988 | Time: 24.3450
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [236] Train Loss: 0.1867 | Train MAE: 0.1855 | Val Loss: 0.4990 | Val MAE: 0.4979 | Test MAE: 0.4801 | Time: 23.9279
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [237] Train Loss: 0.2139 | Train MAE: 0.2127 | Val Loss: 0.4960 | Val MAE: 0.4949 | Test MAE: 0.4818 | Time: 27.1036
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [238] Train Loss: 0.1816 | Train MAE: 0.1804 | Val Loss: 0.4911 | Val MAE: 0.4899 | Test MAE: 0.4728 | Time: 23.1907
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [239] Train Loss: 0.1800 | Train MAE: 0.1787 | Val Loss: 0.4873 | Val MAE: 0.4861 | Test MAE: 0.4656 | Time: 26.1163
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [240] Train Loss: 0.1726 | Train MAE: 0.1714 | Val Loss: 0.4943 | Val MAE: 0.4932 | Test MAE: 0.4721 | Time: 23.1769
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [241] Train Loss: 0.1788 | Train MAE: 0.1776 | Val Loss: 0.4902 | Val MAE: 0.4890 | Test MAE: 0.4694 | Time: 24.2327
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [242] Train Loss: 0.1778 | Train MAE: 0.1766 | Val Loss: 0.4917 | Val MAE: 0.4906 | Test MAE: 0.4726 | Time: 23.0743
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [243] Train Loss: 0.1751 | Train MAE: 0.1739 | Val Loss: 0.4855 | Val MAE: 0.4844 | Test MAE: 0.4643 | Time: 25.4542
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [244] Train Loss: 0.1804 | Train MAE: 0.1792 | Val Loss: 0.4864 | Val MAE: 0.4853 | Test MAE: 0.4673 | Time: 26.2899
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [245] Train Loss: 0.1790 | Train MAE: 0.1777 | Val Loss: 0.4857 | Val MAE: 0.4846 | Test MAE: 0.4656 | Time: 24.1527
Epoch 00246: reducing learning rate of group 0 to 6.2500e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [246] Train Loss: 0.1638 | Train MAE: 0.1626 | Val Loss: 0.4855 | Val MAE: 0.4843 | Test MAE: 0.4656 | Time: 23.8642
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [247] Train Loss: 0.1724 | Train MAE: 0.1712 | Val Loss: 0.4872 | Val MAE: 0.4860 | Test MAE: 0.4678 | Time: 23.2745
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [248] Train Loss: 0.1733 | Train MAE: 0.1721 | Val Loss: 0.4808 | Val MAE: 0.4797 | Test MAE: 0.4639 | Time: 28.0077
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [249] Train Loss: 0.1793 | Train MAE: 0.1781 | Val Loss: 0.5010 | Val MAE: 0.4998 | Test MAE: 0.4814 | Time: 23.7814
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [250] Train Loss: 0.1615 | Train MAE: 0.1603 | Val Loss: 0.4894 | Val MAE: 0.4882 | Test MAE: 0.4699 | Time: 23.0917
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [251] Train Loss: 0.1891 | Train MAE: 0.1879 | Val Loss: 0.4872 | Val MAE: 0.4860 | Test MAE: 0.4666 | Time: 24.3041
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [252] Train Loss: 0.1628 | Train MAE: 0.1616 | Val Loss: 0.4887 | Val MAE: 0.4876 | Test MAE: 0.4658 | Time: 23.7539
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [253] Train Loss: 0.1676 | Train MAE: 0.1664 | Val Loss: 0.4887 | Val MAE: 0.4875 | Test MAE: 0.4666 | Time: 23.7907
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [254] Train Loss: 0.1647 | Train MAE: 0.1635 | Val Loss: 0.4844 | Val MAE: 0.4833 | Test MAE: 0.4661 | Time: 23.7999
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [255] Train Loss: 0.1607 | Train MAE: 0.1595 | Val Loss: 0.4860 | Val MAE: 0.4848 | Test MAE: 0.4667 | Time: 23.6743
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [256] Train Loss: 0.1756 | Train MAE: 0.1743 | Val Loss: 0.4846 | Val MAE: 0.4834 | Test MAE: 0.4640 | Time: 23.9483
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [257] Train Loss: 0.1672 | Train MAE: 0.1660 | Val Loss: 0.4899 | Val MAE: 0.4888 | Test MAE: 0.4749 | Time: 23.5151
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [258] Train Loss: 0.1649 | Train MAE: 0.1636 | Val Loss: 0.4947 | Val MAE: 0.4936 | Test MAE: 0.4759 | Time: 23.5572
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [259] Train Loss: 0.1716 | Train MAE: 0.1704 | Val Loss: 0.4850 | Val MAE: 0.4839 | Test MAE: 0.4680 | Time: 23.6091
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [260] Train Loss: 0.1610 | Train MAE: 0.1597 | Val Loss: 0.4810 | Val MAE: 0.4798 | Test MAE: 0.4606 | Time: 26.2615
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [261] Train Loss: 0.1623 | Train MAE: 0.1611 | Val Loss: 0.4850 | Val MAE: 0.4839 | Test MAE: 0.4675 | Time: 25.7974
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [262] Train Loss: 0.1643 | Train MAE: 0.1631 | Val Loss: 0.4837 | Val MAE: 0.4826 | Test MAE: 0.4650 | Time: 23.6073
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [263] Train Loss: 0.1649 | Train MAE: 0.1637 | Val Loss: 0.4886 | Val MAE: 0.4874 | Test MAE: 0.4681 | Time: 23.8972
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [264] Train Loss: 0.1638 | Train MAE: 0.1626 | Val Loss: 0.4878 | Val MAE: 0.4866 | Test MAE: 0.4667 | Time: 23.7573
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [265] Train Loss: 0.1696 | Train MAE: 0.1684 | Val Loss: 0.4877 | Val MAE: 0.4866 | Test MAE: 0.4694 | Time: 23.6376
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [266] Train Loss: 0.1658 | Train MAE: 0.1646 | Val Loss: 0.4909 | Val MAE: 0.4897 | Test MAE: 0.4681 | Time: 23.7442
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [267] Train Loss: 0.1511 | Train MAE: 0.1499 | Val Loss: 0.4876 | Val MAE: 0.4864 | Test MAE: 0.4651 | Time: 23.6476
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [268] Train Loss: 0.1685 | Train MAE: 0.1673 | Val Loss: 0.4911 | Val MAE: 0.4899 | Test MAE: 0.4673 | Time: 23.6405
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [269] Train Loss: 0.1594 | Train MAE: 0.1582 | Val Loss: 0.4862 | Val MAE: 0.4850 | Test MAE: 0.4679 | Time: 24.6386
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [270] Train Loss: 0.1633 | Train MAE: 0.1620 | Val Loss: 0.4913 | Val MAE: 0.4902 | Test MAE: 0.4709 | Time: 23.6560
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [271] Train Loss: 0.1732 | Train MAE: 0.1720 | Val Loss: 0.4941 | Val MAE: 0.4929 | Test MAE: 0.4717 | Time: 23.5851
Epoch 00272: reducing learning rate of group 0 to 3.1250e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [272] Train Loss: 0.1708 | Train MAE: 0.1696 | Val Loss: 0.4876 | Val MAE: 0.4865 | Test MAE: 0.4661 | Time: 23.6713
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [273] Train Loss: 0.1650 | Train MAE: 0.1638 | Val Loss: 0.4909 | Val MAE: 0.4897 | Test MAE: 0.4710 | Time: 24.1950
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [274] Train Loss: 0.1578 | Train MAE: 0.1566 | Val Loss: 0.4860 | Val MAE: 0.4849 | Test MAE: 0.4608 | Time: 23.7910
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [275] Train Loss: 0.1672 | Train MAE: 0.1659 | Val Loss: 0.4909 | Val MAE: 0.4897 | Test MAE: 0.4687 | Time: 23.6594
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [276] Train Loss: 0.1569 | Train MAE: 0.1557 | Val Loss: 0.4877 | Val MAE: 0.4866 | Test MAE: 0.4626 | Time: 23.6716
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [277] Train Loss: 0.1522 | Train MAE: 0.1510 | Val Loss: 0.4876 | Val MAE: 0.4864 | Test MAE: 0.4631 | Time: 23.6696
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [278] Train Loss: 0.1642 | Train MAE: 0.1630 | Val Loss: 0.4852 | Val MAE: 0.4841 | Test MAE: 0.4667 | Time: 23.6281
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [279] Train Loss: 0.1664 | Train MAE: 0.1651 | Val Loss: 0.4882 | Val MAE: 0.4870 | Test MAE: 0.4661 | Time: 23.4522
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [280] Train Loss: 0.1628 | Train MAE: 0.1615 | Val Loss: 0.4836 | Val MAE: 0.4825 | Test MAE: 0.4596 | Time: 23.4808
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [281] Train Loss: 0.1503 | Train MAE: 0.1491 | Val Loss: 0.4901 | Val MAE: 0.4890 | Test MAE: 0.4676 | Time: 23.3846
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [282] Train Loss: 0.1541 | Train MAE: 0.1529 | Val Loss: 0.4936 | Val MAE: 0.4925 | Test MAE: 0.4752 | Time: 23.6272
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [283] Train Loss: 0.1580 | Train MAE: 0.1568 | Val Loss: 0.4846 | Val MAE: 0.4834 | Test MAE: 0.4623 | Time: 23.7642
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [284] Train Loss: 0.1561 | Train MAE: 0.1548 | Val Loss: 0.4857 | Val MAE: 0.4846 | Test MAE: 0.4683 | Time: 23.7170
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [285] Train Loss: 0.1519 | Train MAE: 0.1506 | Val Loss: 0.4840 | Val MAE: 0.4829 | Test MAE: 0.4644 | Time: 24.8066
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [286] Train Loss: 0.1570 | Train MAE: 0.1558 | Val Loss: 0.4879 | Val MAE: 0.4867 | Test MAE: 0.4696 | Time: 23.1425
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [287] Train Loss: 0.1592 | Train MAE: 0.1580 | Val Loss: 0.4846 | Val MAE: 0.4834 | Test MAE: 0.4630 | Time: 23.8880
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [288] Train Loss: 0.1564 | Train MAE: 0.1552 | Val Loss: 0.4888 | Val MAE: 0.4877 | Test MAE: 0.4685 | Time: 23.8217
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [289] Train Loss: 0.1597 | Train MAE: 0.1585 | Val Loss: 0.4910 | Val MAE: 0.4899 | Test MAE: 0.4719 | Time: 23.1438
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [290] Train Loss: 0.1669 | Train MAE: 0.1657 | Val Loss: 0.4857 | Val MAE: 0.4845 | Test MAE: 0.4637 | Time: 24.1750
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [291] Train Loss: 0.1554 | Train MAE: 0.1542 | Val Loss: 0.4905 | Val MAE: 0.4894 | Test MAE: 0.4679 | Time: 23.7734
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [292] Train Loss: 0.1541 | Train MAE: 0.1529 | Val Loss: 0.4873 | Val MAE: 0.4862 | Test MAE: 0.4638 | Time: 24.7926
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [293] Train Loss: 0.1637 | Train MAE: 0.1624 | Val Loss: 0.4951 | Val MAE: 0.4940 | Test MAE: 0.4727 | Time: 24.0564
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [294] Train Loss: 0.1511 | Train MAE: 0.1499 | Val Loss: 0.4898 | Val MAE: 0.4887 | Test MAE: 0.4661 | Time: 26.6119
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [295] Train Loss: 0.1767 | Train MAE: 0.1755 | Val Loss: 0.4949 | Val MAE: 0.4938 | Test MAE: 0.4740 | Time: 26.6393
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [296] Train Loss: 0.1538 | Train MAE: 0.1526 | Val Loss: 0.4917 | Val MAE: 0.4906 | Test MAE: 0.4679 | Time: 23.9899
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [297] Train Loss: 0.1585 | Train MAE: 0.1572 | Val Loss: 0.4873 | Val MAE: 0.4862 | Test MAE: 0.4638 | Time: 23.0508
Epoch 00298: reducing learning rate of group 0 to 1.5625e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [298] Train Loss: 0.1601 | Train MAE: 0.1589 | Val Loss: 0.4859 | Val MAE: 0.4847 | Test MAE: 0.4626 | Time: 23.7172
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [299] Train Loss: 0.1595 | Train MAE: 0.1582 | Val Loss: 0.4883 | Val MAE: 0.4872 | Test MAE: 0.4647 | Time: 23.5809
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [300] Train Loss: 0.1601 | Train MAE: 0.1589 | Val Loss: 0.4927 | Val MAE: 0.4916 | Test MAE: 0.4746 | Time: 24.2839
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [301] Train Loss: 0.1582 | Train MAE: 0.1569 | Val Loss: 0.4881 | Val MAE: 0.4870 | Test MAE: 0.4681 | Time: 24.0302
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [302] Train Loss: 0.1592 | Train MAE: 0.1580 | Val Loss: 0.4873 | Val MAE: 0.4861 | Test MAE: 0.4632 | Time: 24.6998
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [303] Train Loss: 0.1515 | Train MAE: 0.1502 | Val Loss: 0.4871 | Val MAE: 0.4860 | Test MAE: 0.4633 | Time: 25.2516
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [304] Train Loss: 0.1531 | Train MAE: 0.1519 | Val Loss: 0.4861 | Val MAE: 0.4849 | Test MAE: 0.4646 | Time: 23.3657
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [305] Train Loss: 0.1495 | Train MAE: 0.1482 | Val Loss: 0.4893 | Val MAE: 0.4882 | Test MAE: 0.4704 | Time: 23.6786
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [306] Train Loss: 0.1519 | Train MAE: 0.1507 | Val Loss: 0.4841 | Val MAE: 0.4829 | Test MAE: 0.4624 | Time: 24.0194
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [307] Train Loss: 0.1616 | Train MAE: 0.1603 | Val Loss: 0.4875 | Val MAE: 0.4863 | Test MAE: 0.4713 | Time: 24.0072
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [308] Train Loss: 0.1557 | Train MAE: 0.1545 | Val Loss: 0.4869 | Val MAE: 0.4858 | Test MAE: 0.4680 | Time: 23.4681
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [309] Train Loss: 0.1527 | Train MAE: 0.1514 | Val Loss: 0.4863 | Val MAE: 0.4852 | Test MAE: 0.4652 | Time: 26.9261
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [310] Train Loss: 0.1541 | Train MAE: 0.1529 | Val Loss: 0.4869 | Val MAE: 0.4857 | Test MAE: 0.4663 | Time: 23.3739
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [311] Train Loss: 0.1567 | Train MAE: 0.1554 | Val Loss: 0.4875 | Val MAE: 0.4863 | Test MAE: 0.4657 | Time: 24.1981
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [312] Train Loss: 0.1528 | Train MAE: 0.1516 | Val Loss: 0.4869 | Val MAE: 0.4858 | Test MAE: 0.4646 | Time: 23.5664
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [313] Train Loss: 0.1501 | Train MAE: 0.1489 | Val Loss: 0.4884 | Val MAE: 0.4873 | Test MAE: 0.4687 | Time: 24.1851
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [314] Train Loss: 0.1547 | Train MAE: 0.1535 | Val Loss: 0.4856 | Val MAE: 0.4845 | Test MAE: 0.4589 | Time: 23.1287
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [315] Train Loss: 0.1519 | Train MAE: 0.1507 | Val Loss: 0.4862 | Val MAE: 0.4851 | Test MAE: 0.4663 | Time: 23.8257
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [316] Train Loss: 0.1589 | Train MAE: 0.1577 | Val Loss: 0.4827 | Val MAE: 0.4816 | Test MAE: 0.4601 | Time: 23.5742
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [317] Train Loss: 0.1543 | Train MAE: 0.1531 | Val Loss: 0.4879 | Val MAE: 0.4867 | Test MAE: 0.4679 | Time: 23.5708
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [318] Train Loss: 0.1483 | Train MAE: 0.1471 | Val Loss: 0.4918 | Val MAE: 0.4906 | Test MAE: 0.4703 | Time: 25.5660
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [319] Train Loss: 0.1621 | Train MAE: 0.1609 | Val Loss: 0.4857 | Val MAE: 0.4846 | Test MAE: 0.4655 | Time: 24.1442
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [320] Train Loss: 0.1491 | Train MAE: 0.1479 | Val Loss: 0.4871 | Val MAE: 0.4860 | Test MAE: 0.4653 | Time: 23.3188
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [321] Train Loss: 0.1591 | Train MAE: 0.1579 | Val Loss: 0.4843 | Val MAE: 0.4831 | Test MAE: 0.4615 | Time: 27.4023
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [322] Train Loss: 0.1652 | Train MAE: 0.1639 | Val Loss: 0.4967 | Val MAE: 0.4955 | Test MAE: 0.4769 | Time: 28.1428
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [323] Train Loss: 0.1451 | Train MAE: 0.1439 | Val Loss: 0.4855 | Val MAE: 0.4844 | Test MAE: 0.4627 | Time: 23.8910
Epoch 00324: reducing learning rate of group 0 to 7.8125e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [324] Train Loss: 0.1520 | Train MAE: 0.1508 | Val Loss: 0.4869 | Val MAE: 0.4857 | Test MAE: 0.4665 | Time: 23.4004
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [325] Train Loss: 0.1586 | Train MAE: 0.1574 | Val Loss: 0.4907 | Val MAE: 0.4895 | Test MAE: 0.4705 | Time: 23.6393
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [326] Train Loss: 0.1514 | Train MAE: 0.1502 | Val Loss: 0.4903 | Val MAE: 0.4891 | Test MAE: 0.4713 | Time: 24.6523
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [327] Train Loss: 0.1473 | Train MAE: 0.1461 | Val Loss: 0.4849 | Val MAE: 0.4838 | Test MAE: 0.4643 | Time: 24.7700
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [328] Train Loss: 0.1515 | Train MAE: 0.1503 | Val Loss: 0.4878 | Val MAE: 0.4866 | Test MAE: 0.4668 | Time: 24.2611
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [329] Train Loss: 0.1594 | Train MAE: 0.1582 | Val Loss: 0.4921 | Val MAE: 0.4910 | Test MAE: 0.4700 | Time: 24.0773
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [330] Train Loss: 0.1544 | Train MAE: 0.1532 | Val Loss: 0.4849 | Val MAE: 0.4838 | Test MAE: 0.4605 | Time: 24.0506
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [331] Train Loss: 0.1507 | Train MAE: 0.1495 | Val Loss: 0.4881 | Val MAE: 0.4869 | Test MAE: 0.4657 | Time: 23.6166
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [332] Train Loss: 0.1523 | Train MAE: 0.1511 | Val Loss: 0.4850 | Val MAE: 0.4839 | Test MAE: 0.4612 | Time: 23.6093
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [333] Train Loss: 0.1440 | Train MAE: 0.1428 | Val Loss: 0.4908 | Val MAE: 0.4897 | Test MAE: 0.4706 | Time: 26.6311
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [334] Train Loss: 0.1586 | Train MAE: 0.1574 | Val Loss: 0.4886 | Val MAE: 0.4875 | Test MAE: 0.4685 | Time: 24.2701
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [335] Train Loss: 0.1488 | Train MAE: 0.1476 | Val Loss: 0.4906 | Val MAE: 0.4895 | Test MAE: 0.4712 | Time: 23.3394
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [336] Train Loss: 0.1537 | Train MAE: 0.1525 | Val Loss: 0.4889 | Val MAE: 0.4878 | Test MAE: 0.4680 | Time: 24.2533
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [337] Train Loss: 0.1469 | Train MAE: 0.1457 | Val Loss: 0.4883 | Val MAE: 0.4872 | Test MAE: 0.4696 | Time: 23.6989
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [338] Train Loss: 0.1541 | Train MAE: 0.1529 | Val Loss: 0.4917 | Val MAE: 0.4905 | Test MAE: 0.4753 | Time: 23.9271
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [339] Train Loss: 0.1554 | Train MAE: 0.1542 | Val Loss: 0.4879 | Val MAE: 0.4867 | Test MAE: 0.4679 | Time: 23.6132
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [340] Train Loss: 0.1548 | Train MAE: 0.1536 | Val Loss: 0.4873 | Val MAE: 0.4862 | Test MAE: 0.4631 | Time: 23.6473
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [341] Train Loss: 0.1416 | Train MAE: 0.1404 | Val Loss: 0.4884 | Val MAE: 0.4873 | Test MAE: 0.4675 | Time: 23.3866
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [342] Train Loss: 0.1439 | Train MAE: 0.1427 | Val Loss: 0.4881 | Val MAE: 0.4869 | Test MAE: 0.4664 | Time: 24.3850
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [343] Train Loss: 0.1473 | Train MAE: 0.1461 | Val Loss: 0.4872 | Val MAE: 0.4861 | Test MAE: 0.4641 | Time: 24.0718
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [344] Train Loss: 0.1631 | Train MAE: 0.1618 | Val Loss: 0.4891 | Val MAE: 0.4880 | Test MAE: 0.4703 | Time: 23.8606
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [345] Train Loss: 0.1441 | Train MAE: 0.1429 | Val Loss: 0.4859 | Val MAE: 0.4848 | Test MAE: 0.4655 | Time: 23.2575
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [346] Train Loss: 0.1548 | Train MAE: 0.1536 | Val Loss: 0.4924 | Val MAE: 0.4912 | Test MAE: 0.4713 | Time: 25.6075
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [347] Train Loss: 0.1508 | Train MAE: 0.1496 | Val Loss: 0.4885 | Val MAE: 0.4874 | Test MAE: 0.4663 | Time: 23.8061
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [348] Train Loss: 0.1464 | Train MAE: 0.1452 | Val Loss: 0.4922 | Val MAE: 0.4911 | Test MAE: 0.4706 | Time: 23.5431
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [349] Train Loss: 0.1518 | Train MAE: 0.1505 | Val Loss: 0.4889 | Val MAE: 0.4877 | Test MAE: 0.4664 | Time: 23.4494
Epoch 00350: reducing learning rate of group 0 to 3.9063e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [350] Train Loss: 0.1540 | Train MAE: 0.1528 | Val Loss: 0.4902 | Val MAE: 0.4890 | Test MAE: 0.4705 | Time: 23.5742
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [351] Train Loss: 0.1507 | Train MAE: 0.1495 | Val Loss: 0.4841 | Val MAE: 0.4830 | Test MAE: 0.4606 | Time: 24.7375
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [352] Train Loss: 0.1524 | Train MAE: 0.1512 | Val Loss: 0.4931 | Val MAE: 0.4919 | Test MAE: 0.4714 | Time: 24.2314
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [353] Train Loss: 0.1506 | Train MAE: 0.1493 | Val Loss: 0.4874 | Val MAE: 0.4862 | Test MAE: 0.4648 | Time: 24.0419
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [354] Train Loss: 0.1464 | Train MAE: 0.1452 | Val Loss: 0.4878 | Val MAE: 0.4866 | Test MAE: 0.4672 | Time: 23.4892
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [355] Train Loss: 0.1475 | Train MAE: 0.1463 | Val Loss: 0.4876 | Val MAE: 0.4865 | Test MAE: 0.4663 | Time: 24.0560
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [356] Train Loss: 0.1564 | Train MAE: 0.1552 | Val Loss: 0.4891 | Val MAE: 0.4879 | Test MAE: 0.4680 | Time: 23.4384
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [357] Train Loss: 0.1558 | Train MAE: 0.1546 | Val Loss: 0.4918 | Val MAE: 0.4907 | Test MAE: 0.4722 | Time: 23.7692
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [358] Train Loss: 0.1432 | Train MAE: 0.1420 | Val Loss: 0.4900 | Val MAE: 0.4889 | Test MAE: 0.4698 | Time: 23.6378
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [359] Train Loss: 0.1536 | Train MAE: 0.1524 | Val Loss: 0.4930 | Val MAE: 0.4918 | Test MAE: 0.4744 | Time: 23.7634
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [360] Train Loss: 0.1475 | Train MAE: 0.1463 | Val Loss: 0.4924 | Val MAE: 0.4912 | Test MAE: 0.4713 | Time: 23.8352
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [361] Train Loss: 0.1570 | Train MAE: 0.1558 | Val Loss: 0.4875 | Val MAE: 0.4863 | Test MAE: 0.4656 | Time: 27.6486
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [362] Train Loss: 0.1566 | Train MAE: 0.1553 | Val Loss: 0.4952 | Val MAE: 0.4941 | Test MAE: 0.4732 | Time: 23.8367
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [363] Train Loss: 0.1489 | Train MAE: 0.1476 | Val Loss: 0.4905 | Val MAE: 0.4894 | Test MAE: 0.4692 | Time: 23.5488
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [364] Train Loss: 0.1444 | Train MAE: 0.1432 | Val Loss: 0.4858 | Val MAE: 0.4847 | Test MAE: 0.4646 | Time: 23.6663
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [365] Train Loss: 0.1543 | Train MAE: 0.1531 | Val Loss: 0.4907 | Val MAE: 0.4896 | Test MAE: 0.4709 | Time: 27.3965
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [366] Train Loss: 0.1473 | Train MAE: 0.1461 | Val Loss: 0.4845 | Val MAE: 0.4833 | Test MAE: 0.4644 | Time: 23.9907
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [367] Train Loss: 0.1479 | Train MAE: 0.1466 | Val Loss: 0.4883 | Val MAE: 0.4872 | Test MAE: 0.4674 | Time: 23.7937
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [368] Train Loss: 0.1541 | Train MAE: 0.1529 | Val Loss: 0.4890 | Val MAE: 0.4878 | Test MAE: 0.4696 | Time: 23.9632
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [369] Train Loss: 0.1484 | Train MAE: 0.1472 | Val Loss: 0.4894 | Val MAE: 0.4883 | Test MAE: 0.4693 | Time: 23.5685
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [370] Train Loss: 0.1528 | Train MAE: 0.1515 | Val Loss: 0.4851 | Val MAE: 0.4839 | Test MAE: 0.4624 | Time: 23.6576
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [371] Train Loss: 0.1483 | Train MAE: 0.1471 | Val Loss: 0.4872 | Val MAE: 0.4861 | Test MAE: 0.4675 | Time: 23.6645
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [372] Train Loss: 0.1471 | Train MAE: 0.1459 | Val Loss: 0.4899 | Val MAE: 0.4887 | Test MAE: 0.4695 | Time: 23.6959
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [373] Train Loss: 0.1566 | Train MAE: 0.1553 | Val Loss: 0.4860 | Val MAE: 0.4848 | Test MAE: 0.4636 | Time: 23.7281
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [374] Train Loss: 0.1525 | Train MAE: 0.1513 | Val Loss: 0.4873 | Val MAE: 0.4862 | Test MAE: 0.4679 | Time: 23.6773
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [375] Train Loss: 0.1474 | Train MAE: 0.1461 | Val Loss: 0.4888 | Val MAE: 0.4877 | Test MAE: 0.4705 | Time: 23.8304
Epoch 00376: reducing learning rate of group 0 to 1.9531e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [376] Train Loss: 0.1497 | Train MAE: 0.1485 | Val Loss: 0.4884 | Val MAE: 0.4873 | Test MAE: 0.4695 | Time: 23.7116
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [377] Train Loss: 0.1419 | Train MAE: 0.1407 | Val Loss: 0.4850 | Val MAE: 0.4838 | Test MAE: 0.4605 | Time: 23.8518
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [378] Train Loss: 0.1439 | Train MAE: 0.1426 | Val Loss: 0.4871 | Val MAE: 0.4859 | Test MAE: 0.4652 | Time: 24.3483
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [379] Train Loss: 0.1523 | Train MAE: 0.1511 | Val Loss: 0.4903 | Val MAE: 0.4892 | Test MAE: 0.4697 | Time: 23.7106
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [380] Train Loss: 0.1471 | Train MAE: 0.1459 | Val Loss: 0.4854 | Val MAE: 0.4842 | Test MAE: 0.4621 | Time: 24.2327
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [381] Train Loss: 0.1519 | Train MAE: 0.1507 | Val Loss: 0.4848 | Val MAE: 0.4836 | Test MAE: 0.4637 | Time: 23.8914
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [382] Train Loss: 0.1529 | Train MAE: 0.1516 | Val Loss: 0.4856 | Val MAE: 0.4845 | Test MAE: 0.4611 | Time: 23.9195
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [383] Train Loss: 0.1511 | Train MAE: 0.1499 | Val Loss: 0.4866 | Val MAE: 0.4854 | Test MAE: 0.4639 | Time: 23.6741
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [384] Train Loss: 0.1462 | Train MAE: 0.1450 | Val Loss: 0.4865 | Val MAE: 0.4853 | Test MAE: 0.4653 | Time: 23.3261
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [385] Train Loss: 0.1519 | Train MAE: 0.1507 | Val Loss: 0.4877 | Val MAE: 0.4865 | Test MAE: 0.4683 | Time: 23.6509
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [386] Train Loss: 0.1474 | Train MAE: 0.1462 | Val Loss: 0.4883 | Val MAE: 0.4871 | Test MAE: 0.4709 | Time: 23.9841
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [387] Train Loss: 0.1610 | Train MAE: 0.1598 | Val Loss: 0.4856 | Val MAE: 0.4845 | Test MAE: 0.4643 | Time: 26.7081
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [388] Train Loss: 0.1549 | Train MAE: 0.1537 | Val Loss: 0.4870 | Val MAE: 0.4859 | Test MAE: 0.4654 | Time: 23.7249
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [389] Train Loss: 0.1542 | Train MAE: 0.1530 | Val Loss: 0.4880 | Val MAE: 0.4869 | Test MAE: 0.4695 | Time: 23.8986
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [390] Train Loss: 0.1441 | Train MAE: 0.1429 | Val Loss: 0.4884 | Val MAE: 0.4873 | Test MAE: 0.4667 | Time: 24.6836
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [391] Train Loss: 0.1486 | Train MAE: 0.1474 | Val Loss: 0.4864 | Val MAE: 0.4852 | Test MAE: 0.4635 | Time: 23.7056
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [392] Train Loss: 0.1563 | Train MAE: 0.1551 | Val Loss: 0.4868 | Val MAE: 0.4857 | Test MAE: 0.4635 | Time: 23.8791
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [393] Train Loss: 0.1484 | Train MAE: 0.1472 | Val Loss: 0.4886 | Val MAE: 0.4875 | Test MAE: 0.4689 | Time: 23.7518
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [394] Train Loss: 0.1607 | Train MAE: 0.1595 | Val Loss: 0.4883 | Val MAE: 0.4872 | Test MAE: 0.4717 | Time: 27.2417
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [395] Train Loss: 0.1490 | Train MAE: 0.1478 | Val Loss: 0.4869 | Val MAE: 0.4857 | Test MAE: 0.4588 | Time: 23.9780
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [396] Train Loss: 0.1549 | Train MAE: 0.1537 | Val Loss: 0.4842 | Val MAE: 0.4830 | Test MAE: 0.4625 | Time: 26.4697
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [397] Train Loss: 0.1496 | Train MAE: 0.1484 | Val Loss: 0.4871 | Val MAE: 0.4860 | Test MAE: 0.4664 | Time: 23.9867
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [398] Train Loss: 0.1542 | Train MAE: 0.1530 | Val Loss: 0.4902 | Val MAE: 0.4890 | Test MAE: 0.4699 | Time: 24.0519
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [399] Train Loss: 0.1426 | Train MAE: 0.1414 | Val Loss: 0.4865 | Val MAE: 0.4853 | Test MAE: 0.4619 | Time: 27.0445
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [400] Train Loss: 0.1481 | Train MAE: 0.1469 | Val Loss: 0.4893 | Val MAE: 0.4881 | Test MAE: 0.4710 | Time: 23.9875
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [401] Train Loss: 0.1512 | Train MAE: 0.1500 | Val Loss: 0.4873 | Val MAE: 0.4862 | Test MAE: 0.4670 | Time: 24.8104
Epoch 00402: reducing learning rate of group 0 to 9.7656e-07.

!! LR EQUAL TO MIN LR SET.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Test MAE: 0.4670
Train MAE: 0.0912
Convergence Time (Epochs): 401.0000
TOTAL TIME TAKEN: 9825.0522s
AVG TIME PER EPOCH: 24.1016s
